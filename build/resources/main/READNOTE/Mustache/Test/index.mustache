

{{>layout/header}}
{{>layout/navbar}}
<link rel="stylesheet" href="Home.css">

<h1>스프링 부트로 시작하는 웹서비스, 배포테</h1>
<div class="col-md-12">
    <!-- 로그인 기능 영역 -->
    <div class="row">
        <div class="col-md-6">
            <a href="/posts/save" role="button" class="btn btn-primary">글 등록</a>
            {{#loginuserName}}
                Logged in as : <span id="user">{{loginuserName}}</span>
                <a href="/logout" class="btn btn-info active" role="button">Logout</a>
            {{/loginuserName}}
            {{^loginuserName}}
                <a href="/oauth2/authorization/google" class="btn btn-success active" role="button">Google Login</a>
                <a href="/oauth2/authorization/naver" class="btn btn-secondary active" role="button">Naver Login</a>
            {{/loginuserName}}

        </div>
    </div>

    <br>
    <!-- 목록 출력 영역 -->
    <table class="table table-horizontal table-bordered">
        <thead class="thead-strong">
        <tr>
            <th>게시글번호</th>
            <th>제목</th>
            <th>작성자</th>
            <th>최종수정일</th>
        </tr>
        </thead>
        <tbody id="tbody">
        {{#posts}}  <!-- posts라는 List를 순회합니다. Java의 for문과 동일하게 생각합니다.-->
            <tr>
                <td>{{id}}</td> <!-- {id},{title},{author},{modifiedDate} 등의 변수명 List에서 뽑아낸 객체의 필드를 사용합니다.  -->
                <td><a href="/posts/update/{{id}}">{{title}}</a></td> <!-- 타이틀(title)에 a tag를 추가합니다. 타이틀을 클릭하면 해당 게시글의 수정화면으로 이동합니다.-->
                <td>{{author}}</td>
                <td>{{modifiedDate}}</td>
            </tr>
        {{/posts}}
        </tbody>
    </table>
</div>

{{>layout/footer}}

<!-- {layout}은 현재 머스테치파일을 기준으로 다른 파일을 가져옵니다.
    {>} 는 현재 머스테치 파일(index.mustache)을 기준으로 다른 파일을 가져옵니다.
레이아웃으로 파일을 분리했으니 index.mustache에 글 등록 버튼을 하나 추가해봅니다.
여기서는 <a> 태그를 이용해 글 등록 페이지로 이동하는 글등록버튼이 생성되었습니다.
이동할 페이지의 주소는 /posts/save 입니다.
이 주소에 해당하는 컨트롤러를 생성하겠습니다. 페이지에 관련된 컨트롤러는 모두 IndexController를 사용합니다.ㅑ
index.mustache와 마찬가지로 /posts/save 를 호출하면 posts-save.mustache를 호출하는 메소드가 추가되었습니다.
컨트롤러 코드가 생성되었다면 posts-save.mustache 파일을 생성합니다. 파일의 위치는 index.mustache와 같습니다.

Posts-save UI가 완성되었으니 다시 프로젝트를 실행하고 브라우저에서 http://localhost:8080/ 로 접근해보겠습니다.
"글 등록" 이라고 되어있는 버튼을 클릭하면 글 등록화면으로 이동합니다.
하지만, 아직 게시글 등록 화면에 등록버튼은 기능이 없습니다.
API를 호출하는 JS가 전혀 없기 때문입니다. 그래서 src/main/resources에 static/js/app 디렉토리를 생성합니다.
해당 위치에 index.js를 생성합니다.

---
4.4 전체 조회를 위해 index.mustache의 UI를 변경하겠습니다.

머스테치의 문법이 처음으로 사용됩니다.
그럼 Controller, Service, Repository 코드를 작성하겠습니다. 먼저 Repository 부터 시작합니다.
기존에 있던 PostRepository 인터페이스에 쿼리가 추가됩니다.
[\src\main\java\com\meetingroom\reservation\domain\posts\PostsRepository.java]에 추가됩니다.


---
화면쪽 작업이 다 끝났으니 수정화면을 연결할 Controller 코드를 작업하겠습니다.
[\src\main\java\com\meetingroom\reservation\web\IndexController.java] 다음과 같이 메소드를 추가합니다.



{#userName} :머스터치는 다른 언어와 같은 if문 (if userName != null 등)을 제공하지 않습니다.
:true/false 여부만 판단할 뿐입니다. 그래서 머스테치에서는 항상 최종값을 넘겨줘야합니다.
:여기서도 역시 userName이 잇다면 userName을 노출시키도록 구성했습니다.

a href="/logout" : 스프링 시큐리티에서 기본적으로 제공하는 로그아웃 URL입니다.
: 즉, 개발자가 별도로 저 URL에 해당하는 컨트롤러를 만들 필요가 없습니다.
: SecurityConfig 클래스에서 URL을 변경할 순 있지만 기본 URL을 사용해도 충분하니 여기서는 그대로 사용합니다.

{^userName} : 머스테치에서 해당 값이 존재하지 않는 경우에는 ^을 사용합니다.
:여기서는 userName이 없다면 로그인 버튼을 노출시키도록 구성했습니다.

a href ="/oauth2/authorization/google"
:스프링 시큐리티에서 기본적으로 제공하는 로그인 URL입니다.
:로그아웃 URL과 마찬가지로 개발자가 별도의 컨트롤러를 생성할 필요가 없습니다.

index.mustache에서 userName을 사용할 수 있게 [\src\main\java\com\room\reservation\web\IndexController.java]에서
userName을 model에 저장하는 코드를 추가합니다.

[\src\main\java\com\room\reservation\web\IndexController.java] 그 이후 Index.mustache에서 uerName을 사용할 수 있게
IndexController에서 userName을 model에 저장하는 코드를 작성합니다.

a href="/oauth2/authorization/naver : 네이버 로그인 URL은 application-oauth.properties에 등록한 redirect-url 값에 맞춰 자동으로 등록됩니다.
: /oauth2/authorization/까지는 고정이고 마지막 Path만 각 소셜 로그인 코드를 사용하면 됩니다.
: 여기서는 naver가 마지막 Path가 됩니다.





-->
