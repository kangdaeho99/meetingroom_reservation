Chapter 9. 코드가 푸시되면 자동으로 배포해보자, Travis CI 배포자동회


24시간 365일 운영되는 서비스에서 배포환경구축은 필수과제 중 하나입니다.
여러 개발자의 코드가 실시간으로 병합되고, 테스트가 수행되는 환경, master 브랜치가 푸시되면 배포가 자동으로 이루어지는환경을 구축하지 않으면
실수할 여지가 너무나 많습니다. 이번장에서는 바로 이런 배포환경을 구성해보겠습니다.

9.1 CI & CD 소개
8장에서 스프링 부트 프로젝트를 간단하게 EC2에 배포해보았습니다.
스크립트를 개발자가 직접 실행함으로써 발생하는 불편을 경험했습니다.
그래서, CI, CD 환경을 구축하여 이 과정을 개선하려고 합니다.
근데, CI와 CD란 무엇일까요? 코드 버전 관리를 하는 VCS 시스템(Git, SVN 등)에 PUSH가 되면 자동으로 테스트와 빌드가 수행되어 안정적인 배포파일을 만드는 과정을
CI(Continuous Integration - 지속적 통합)라고 하며, 이 빌드결과를 자동으로 운영서버에 무중단 배포까지 진행되는 과정을 CD(Continuous Deployment - 지속적인 배포)
라고 합니다.
일반적으로 CI만 구축되어 있지는 않고, CD도 함께 구축된 경우가 대부분입니다. 왜 이렇게 CI/CD란 개념이 나왔는지 잠깐 설명해드리겠습니다.
현대의 웹 서비스 개발에서는 하나의 프로젝트를 여러 개발자가 함께 개발을 진행합니다. 그러다보니 각자가 개발한 코드가 합쳐야할때마다 큰일이었습니다. 그래서 매주 병합일(코드 Merge만 하는날)
을 정하여 이날은 각자가 개발한 코드를 합치는 일만 진행했습니다.(오죽하면 필자가 SI에 근무하던 시절에는 빌드전문가라는 직종이 있었습니다.)
이런 수작업 때문에 생산성이 좋을 수가 없었으며 개발자들은 지속해서 코드가 통합되는 환경(CI)을 구축하게 되었습니다. 개발자 각자가 원격저장소(깃허브나 갯립) 등로
푸시가 될때마다 코드를 병합하고, 테스트코드와 빌드를 수행하면서 자동으로 코드가 통합되어 더는 수동으로 코드를 통합할 필요가 없어지면서 자연스레 개발자들 역시
개발에만 집중할 수 있게 되었습니다.
CD 역시 마찬가지입니다. 한 두대의 서버에 개발자가 수동으로 배포를 할 수 있지만, 수십대 수백대의 서버에 배포를 해야하거나 긴박하게 당장 배포를 해야하는
상황이 오면 더는 수동으로 배포할 수가 없습니다.
그래서 이 역시 자동화하게 되었고, 개발자들이 개발에만 집중할 수 있게 되었습니다.
여기서 주의할점은 단순히 CI 도구를 도입했다고해서 CI를 하고있는 것은 아닙니다. 마틴 파울러의 블로그(http://bit.ly/2Yv0vFp)를 참고해보면
CI에 대해 다음과 같은 4가지 규칙을 이야기합니다.
- 모든 소스코드가 살아있고(현재 실행되고) 누구든 현재의 소스에 접근할 수 잇는 단일 지점을 유지할것
- 빌드 프로세스를 자동화해서 누구든 소스로부터 시스템을 빌드하는 단일 명령어를 사용할 수 있게 할것
- 테스팅을 자동화해서 단일 명령어로 언제든지 시스템에 대한 건전한 테스트 수트를 실행할 수 있게 할것
- 누구나 현재 실행파일을 얻으면 지금까지 가장 완전한 실행파일을 얻었다는 확신을 하게 할것

여기서 특히나 중요한것은 테스팅 자동화입니다. 지속적으로 통합하기 위해서는 무엇보다 이 프로젝트가 완전한 상태임을 보장하기 위해 테스트 코드가
구현되어 있어야만 합니다. (2장과 5장까지 계속 테스트 코드를 작성했던 것을 다시 읽어보는 것도 좋습니다.)
테스트코드작성, TDD에 대해 좀 더 자세히 알고 싶은 분들은 명품강의로 유명한 백명석님의 클린코더스 - TDD편(http://bit.ly/2xtKinX)을 꼭 보길 추천합니다.
CI와 CD가 어떤 것인지 조금 감이 오나요? 그럼 실제 CI/CD 툴을 하나씩 적용해보겠습니다.

9.2 Travis CI 연동하기
Travis CI는 깃허브에서 제공하는 무료 CI 서비스입니다. 젠킨스와 같은 CI 도구도 있지만, 젠킨스는 설치형이기 때문에 이를 위한 EC2인스턴스가 하나 더 필요합니다.
이제 시작하는 서비스에서 배포를 위한 EC2인스턴스는 부담스럽기 떄문에 오픈소스 웹 서비스인 Travis CI를 사용하겠습니다.
(AWS에서 Travis CI와 같은 CI 도구로 CodeBuild를 제공합니다. 하지만 빌드 시간만큼 요금이 부과되는 구조라 초기에 사용하기에는 부담스럽습니다.
실제 서비스되는 EC2, RDS, S3 외에는 비용부분을 최소화하는것이 좋습니다.)

Travis CI 웹 서비스 설정
https://travis-ci.org/ 에서 깃허브 계정으로 로그인을 한뒤, 오른쪽 위에 [계정명 => Settings]를 클릭합니다.
설정페이지 아래쪽을 보면 깃허브 저장소 검색창이 있습니다. 여기서 저장소 이름을 입력해서 찾은다음, 오른쪽의 상태바를 활성화시킵니다.
활성화한 저장소를 클릭하면 다음과 같이 저장소 빌드 히스토리 페이지로 이동합니다. Travis CI 웹사이트에서 설정은 이것이 끝입니다.
상세한 설정은 프로젝트의 yml 파일로 진행해야하니, 프로젝트로 돌아가겠습니다.

프로젝트 설정
Travis CI 의 상세한 설정은 프로젝트에 존재하는 .travis.yml파일로 할 수 잇습니다. 여기서 잠깐 처음 보는 파일확장자 .yml 이 있습니다.
yml파일 확장자를 YAML(야믈)이라고 합니다.
아마 웹개발을 한 독자는 JSON이 친숙할텐데요. YAML은 쉽게 말해서 JSON에서 괄호를 제거한것입니다. YAML 이념이 "기계에서 파싱하기 쉽게, 사람이 다루기 쉽게"이다보니
익숙하지 않은 독자라도 읽고쓰기가 쉽습니다. 그러다보니 현재 많은 프로젝트와 서비스들이 이 YAML을 적극적으로 사용중입니다.
Travis CI 역시 설정을 이 YAML을 통해서 하고 있습니다.
그럼 Travis CI 설정을 진행해보겠습니다. 프로젝트의 build.gradle과 같은 위치에서 .travis.yml을 생성한 후 다음의 코드를 추가합니다.

language: java
jdk:
  - openjdk8

branches:
  only:
    - master

#Travis CI server's Home
cache:
  directories:
    - '$HOME/.m2/repository'
    - '$HOME/.gradle'

script: "./gradlew clean build"

#CI 실행 완료시 메일로 알람
notifications:
  email:
    recipients:
      - 본인메일주소

(1) branches : Travis CI를 어느 브랜치가 푸시될떄 수행할지 지정합니다.
:현재 옵션은 오직 master 브랜치에 push 될때만 수행합니다.

(2) cache : 그레이들을 통해 의존성을 받게 되면 이를 해당 디렉토리에 캐시하여, 같은 의존성은 다음 배포때부터 다시 받지 않도록 설정합니다.

(3) script : master 브랜치에 푸시되었을때 수행하는 명령어입니다.
: 여기서는 프로젝트 내부에 둔 gradlew을 통해 clean & build를 수행합니다.

(4) notifications : Travis CI 실행 완료 시 자동으로 알람이 가도록 설정합니다.

자 그럼 여기까지 마친뒤, master 브랜치에 커밋과 푸시를 하고, 좀 전의 Travis CI 저장소 페이지를 확인합니다.
빌드가 성공한것이 확인되면, .travis.yml에 등록한 이메일을 확인합니다.

빌드가 성공했다는 것을 메일로도 잘 전달받아 확인했습니다!


9.3 Travis CI와 AWS S3 연동하기
S3란 AWS에서 제공하는 일종의 파일 서버입니다. 이미지 파일을 비롯한 정적파일들을 관리하거나 지금 진행하는 것처럼 배포파일들을 관리하는 등의 기능을 지원합니다.
보통 이미지 업로드를 구현한다면 이 S3를 이용하여 구현하는 경우가 많습니다. S3를 비롯한 AWS 서비스와 Travis CI를 연동하게 되면 전체구조는 다음과 같습니다.
첫번째 단계로 Travis CI와 S3를 연동하겠습니다. 실제 배포는 AWS CodeDeploy라는 서비스를 이용합니다. 하지만, S3 연동이 먼저 필요한 이유는 JAR 파일을 전달하기 위해서입니다.
CodeDpeloy는 저장기능이 없습니다. 그래서 Travis CI가 빌드한 결과물을 받아서 CodeDeploy가 가져갈 수 있도록 보관할 수 있는 공간이 필요합니다.
보통은 이럴떄 AWS S3를 이용합니다.
(CodeDeploy가 빌드도 하고 배포도 할 수 있습니다. CodeDeploy에서는 깃허브 코드를 가져오는 기능을 지원하기 때문입니다. 하지만 이렇게 할때 빌드없이 배포만 필요할떄 대응하기 어렵습니다.
빌드와 배포가 분리되어있으면 예전에 빌드되어 만들어진 Jar를 재사용하면 되지만, CodeDeploy가 모든 것을 하게 될땐 항상 빌드를 하게 되니 확장성이 많이 떨어집니다. 그래서 웬만하면
빌드와 배포는 분리하는 것을 추천합니다.)
Travis CI와 AWS S3 연동을 진행해보겠습니다.

AWS KEY 발급
일반적으로 AWS 서비스에 외부서비스가 접근할 수 없습니다. 그러므로 접근가능한 권한을 가진 Key를 생성해서 사용해야합니다.
AWS에서는 이러한 인증과 관련된 기능을 제공하는 서비스로 IAM(Identity and Access Management)이 있습니다.
IAM은 AWS에서 제공하는 서비스의 접근방식과 권한을 관리합니다. 이 IAM을 통해 Travis CI가 AWS의 S3와 CodeDeploy에 접근할 수 있도록 해보겠습니다.
AWS 웹 콘솔에서 IAM을 검색하여 이동합니다. IAM 페이지 왼쪽 사이드바에서 [사용자->사용자추가] 버튼을 차례로 클릭합니다.
[그림 9-7 IAM검색후, IAM사용자 추가]
새엇ㅇ할 사용자의 이름과 액세스 유형을 선택합니다. 액세스 유형은 프로그래밍 방식 엑세스입니다.
[그림9-8 액세스 유형 선택, 사용자 이름 : freelect-travis-deploy, AWS액세스 유형 : 프로그래밍 방식 액세스]
권한설정방식은 3개중 [기존 정책 직접 연결]을 선택합니다.
화면 아래 정책 검색화면에서 s3full로 검색하여 체크하고 다음 권한으로 CodeDeployFull을 검색하여 체크합니다.
[그림 9-10 S3 권한과 CodeDeploy 권한 추가]
실제 서비스 회사에서는 권한도 S3와 CodeDeploy를 분리해서 관리하기도 합니다만, 여기서는 간단하게 둘을 합쳐서 관리하겠습니다.
2개의 권한이 설정되었으면 다음으로 넘어갑니다.
태그는 Name값을 지정하는데, 본인이 인지 가능한 정도의 이름으로 만듭니다.(키:Name, 값(선택사항):freelec-travis-deploy)
마지막으로 본인이 생성한 권한 설정 항목을 확인합니다.
[그림 9-12 권한 최종 확인]
최종생성 완료되면 다음과 같이 액세스 키와 비밀 엑세스 키가 생성됩니다. 이 두값이 Travis CI에서 사용될 키입니다.
이제 이 키를 Travis CI에 등록하겠습니다.

Travis CI에 키 등록
먼저 TravisCI의 설정화면으로 이동합니다.
설정화면을 아래로 조금 내려보면 Environment Variables 항목이 있습니다.
여기에 AWS_ACCESS_KEY, AWS_SECRET_KEY를 변수로 해서 IAM 사용자에서 발급받은 키 값들을 등록합니다.

-AWS_ACCESS_KEY : 엑세스 키 ID
-AWS_SECRET_KEY : 비밀 엑세스 키

여기에 등록된 값들은 이제 .travis.yml에서 $AWS_ACCESS_KEY, $_AWS_SECRET_KEY 란 이름으로 사용할 수 있습니다.
그럼 이제 이 키를 사용해서 Jar를 관리할 S3 버킷을 생성하겠습니다. (쉘 스크립트에서 변수를 사용했던 것과 비슷합니다.)

S3 버킷 생성
다음으로 S3(Simple Storage Service)에 관해 설정을 진행하겠습니다. AWS의 S3 서비스는 일종의 파일 서버입니다. 순수하게 파일들을 저장하고
접근 권한을 관리, 검색 등을 지원하는 파일 서버의 역할을 합니다.
S3는 보통 게시글을 쓸떄 나오는 첨부파일 등록을 구현할때 많이 이용합니다. 파일 서버의 역할을 하기 떄문인데, Travis CI에서 생성된 Build파일을 저장하도록 구성하겠습니다
S3에 저장된 Build 파일은 이후 AWS의 CodeDeploy에서 배포할 파일로 가져가도록 구성할 예정입니다. AWS 서비스에서 S3를 검색하여 이동하고 버킷을 생성합니다.
원하는 버킷명을 작성합니다.이 버킷에 배포할 Zip 파일이 모여있는 장소임을 의미하도록 짓는 것을 추천합니다.

다음으로 넘어가서 버전관리를 설정합니다. 별다른 설정을 하것이 없으니 바로 넘어갑니다.
다음으로는 버킷의 보안과 권한 설정 부분입니다. 퍼블릭 액세스를 열어두는 분이 있을텐데, 모든 차단을 해야합니다. 현재 프로젝트야 이미 깃허브에 오픈소스로 풀려있으니 문제없지만,
실제서비스에서 할때는 Jar파일이 퍼블릭일경우 누구나 내려받을 수 있어 코드나 설정값, 주요 키값들이 다 탈취될 수 있습니다.
퍼블릭이 아니더라도 우리는 IAM 사용자로 발급받은 키를 사용하니 접근가능합니다. 그러므로 모든 액세스를 차단하는 설정에 체크합니다.

[그림9-19 버킷 만들기, 모든 퍼블릭 액세스 차단 옵션 선택]
버킷이 생성되면 다음과 같이 버킷 목록에서 확인할 수 있습니다. freelec-springboot-build
S3가 생성되었으니 이제 이 S3로 배포파일을 전달해보겠습니다.
.travis.yml 추가
Travis CI에서 빌드하여 만든 Jar파일을 S3에 올릴 수 있도록 9.2절에서 만든 .travis.yml에 다음 코드를 추가합니다.

[\room_reservation\.travis.yml]
...(이전내용 생략)
before_deploy:
  - zip -r freelec-springboot2-webservice *
  - mkdir -p deploy
  - mv freelec-springboot2-webservice.zip deploy/freelec-springboot2-webservice.zip

deploy:
  - provider: s3
    access_key_id: $AWS_ACCESS_KEY  # You should write Travis repo settings value
    secret_access_key : $AWS_SECRET_KEY # You should write Travis repo settings value
    bucket: freelec-springboot-build  #S3 bucket
    region: ap-northeast-2
    skip_cleanup: true
    acl: private      # access zip file by private
    local_dir: deploy   # Directory that made in before_deploy
    wait-until-deployed : true

# IF CI execute completed, Mail alert
notifications:
  email:
    recipients:
      - (my email address)


(1) before_deploy : deploy 명령어가 실행되기 전에 수행됩니다.
: CodeDeploy는 Jar파일은 인식하지 못하므로 Jar + 기타설정파일들을 모아 압축(zip)합니다.

(2) zip -r freelec-springboot2-webservice : 현재 위치의 모든 파일을 freelec-springboot2-webserivce 이름으로 압축(zip)합니다.
: 명령어의 마지막 위치는 본인의 프로젝트 이름이어야 합니다.

(3) mkdir -p deploy : deploy 라는 디렉토리를 Travis CI가 실행중인 위치에서 생성합니다.

(4) mv freelec-springboot2-webservice.zip deploy/freelec-springboot2-webservice.zip :
: freelec-springboot-webservice.zip 파일을 deploy/freelec-springboot2-webservice.zip 으로 이동시킵니다.

(5) deploy
: S3로 파일업로드 혹은 CodeDeploy로 배포 등 외부 서비스와 연동될 행위들을 선언합니다.

(6) local_dir: deploy : 앞에서 생성한 deploy 디렉토리를 지정합니다.
: 해당 위치의 파일들만 S3로 전송합니다.

설정이 다 되었으면 깃허브로 푸시합니다.
Travis CI에서 자동으로 빌드가 진행되는 것을 확인하고, 모든 빌드가 성공하였는지 확인합니다.
다음 로그가 나온다면 Travis CI의 빌드가 성공한 것입니다.

log
Installing deploy dependencies
Logging in with Access Key : *****************
Beginning upload of 1 files with 5 threads.
Preparing deploy
Deploying Application
Done. Your build exited with 0.

그리고 S3 버킷을 가보면 업로드가 성공한 것을 확인할 수 있습니다.

Travis CI를 통해 자동으로 파일이 올려진 것을 확인할 수 있습니다.
Travis CI와 S3 연동이 완료되었습니다. 이제 CodeDeploy로 배포까지 완료해보겠습니다.

--------------------------------------------
여기서 문제발생했습니다. Travis CI가 무료요금제를 삭제하고 과곰방식으로 변화함에 따라
Jenkins를 사용하여 진행해봅니다.
참고할 블로그
https://may9noy.tistory.com/365 : AWS JENKINS DOCKER ?? Docker관련내용이 있어서 일단가져왔습니다. Docker를 통해서 진행하기도하는듯
https://lock.tistory.com/2 : Window에서 Jenkins 사용법,(jdk버전...이 중요했는데 여기에는 그게 안나왔다)
https://lemontia.tistory.com/945 : [aws] Jenkins + S3 + CodeDeploy 를 이용해 배포하기(수동배포)


추가로 Jenkins와 AWS S3, Codedeploy를 사용. 아마 Travis CI와 다를바 없을듯하다.
Port : 2023

젠킨슨 Windows 설치 과정중 겪은 에러사항들정리
1. JDK는 JRE를 포함할 뿐만 아니라 컴파일러(javac), javadoc, jar 등 개발에 유용한 도구들을 포함하고 있다.
 따라서 자바 프로그램을 개발하기 위해서는 JDK를 다운로드하여야 한다. 결론은 JRE는 자바 실행환경이고, JDK는 자바 개발 도구
2. Jenkins은 jdk11과 jdk 17만을 지원하고있다. 내가 사용하던거는 1.8로 jdk8 버전이라 안됬었다.
3. jdk 가 제대로 설치되어쓴지 보려면 java -version, javac, javap 까지 다 실행되야한다.

4. 나는 젠킨스를 윈도우로 설치한상태라 C:\Program Files\Jenkins 에 있는 jenkins.exe를 클릭하면 사용할 수 있으리라 생각햇었다.
그것은 큰 오산. 그 과정에서 cannot start from debugger가 뜨고 별 난리가 다치길래
cmd 관리자 권한으로 가서 installutill "C:\Program Files\Jenkins\jenkins.exe" 같은 작업까지 통하여 설치까지 진행했지만 이것이 아니었따.
즉, 젠킨스는 서버이고 그냥 실행하는거지 윈도우 GUI 프로그램이 아니라, nodejs나 linux같은 서버에서 다루는 일종의 그런 파일인것이다.
어찌도시든 cmd에서 아래의 command를 실행하고 브라우저러 접속한다.
[https://stackoverflow.com/questions/14869311/start-stop-and-restart-jenkins-service-on-windows]
Open Console/Command line --> Go to your Jenkins installation directory. Execute the following commands respectively:
to stop:
jenkins.exe stop

to start:
jenkins.exe start

to restart:
jenkins.exe restart

cmd에서 C:\Program Files\Jenkins 로 이동하여 아래와 같이 작업한뒤 처음에 설정한 15000 포트로 브라우저로 접속한다.
http://localhost:15000/
그러면 패스워드가 존재하는 경로를 알려주는데
C:\ProgramData\Jenkins\.jenkins\secrets\initialAdminPassword 여길로 이동해서 해당 패스워드를 입력하면된다.

젠킨스, springboot CICD 구축(차이점은 난 localhost에서 젠킨스를 돌린다는것. 여기는 AWS로 돌림)
[https://velog.io/@haeny01/AWS-Jenkins%EB%A5%BC-%ED%99%9C%EC%9A%A9%ED%95%9C-Docker-x-SpringBoot-CICD-%EA%B5%AC%EC%B6%95]

github webhokk
[등록시 생긴 에러 : https://stackoverflow.com/questions/59208288/webhook-error-issue-while-integrating-github-with-jenkins]
http://localhost:15000/github-webhook/  --->>>   http://58.123.161.188:15000/github-webhook/



