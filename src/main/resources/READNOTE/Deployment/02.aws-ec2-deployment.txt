[8장]EC2 서버에 프로젝트를 배포해보자.
1장에서 5장까지는 스프링 부트로 서비스 코드를 개발했고, 6장에서 7장까지는 배포환경을 구성하였습니다.
이제 이들을 조합해 실제로 서비스를 한번 배포해보겠습니다.

8.1 EC2에 프로젝트 Clone 받기
먼저 깃허브에서 코드를 받아올 수 있게 EC2에 깃을 설치하겠습니다.
EC2로 접속해서 다음과 같이 명령어를 입력합니다.

sudo yum install git

설치가 완료되면 다음 명령어로 설치 상태를 확인합니다.

git --version

깃이 성공적으로 설치되면 git clone으로 프로젝트를 저장할 디렉토리를 생성하겠습니다.

mkdir ~/app && mkdir ~/app/step1

생성된 디렉토리로 이동합니다.

cd ~/app/step1

본인의 깃허브 웹페이지에서 https 주소를 복사합니다.
복사한 https 주소를 통해 git clone을 진행합니다.

git clone 복사한 주소

다음과 같이 클론이 진행되는 것을 볼 수 있습니다.

git clone이 끝났으면 클론된 프로젝트로 이동해서 파일들이 잘 복사되었는지 확인합니다.

cd 프로젝트명
ll

다음과 같이 프로젝트의 코드들이 모두 있으면 됩니다.

그리고 코드들이 잘 수행되는지 테스트로 검증하겠습니다.

./gradlew room


5장의 '기존 테스트에 Security 적용하기' 까지 잘 적용했다면 정상적으로 테스트를 통과합니다.

테스트가 실패해서 수정하고 깃허브에 푸시를 했다면 프로젝트 폴더 안에서 다음 명령어를 사용하면 됩니다.

git pull

만약 다음과 같이 gradlew 실행 권한이 없다는 메세지가 뜬다면
-bash: ./gradlew : Permission denied

다음 명령어로 실행 권한을 추가한뒤 다시 테스트를 수행하면 됩니다.
chmod +x ./gradlew

깃을 통해 프로젝트를 클론과 풀까지 잘 진행되었습니다.
이제 이 프로젝트의 테스트, 빌드, 실행까지 진행하겠습니다.
현재 EC2엔 그레이들(Gradle)을 설치하지 않았습니다. 하지만, Gradle Task(ex:room)를 수행할 수 있습니다.
이는 프로젝트 내부에 포함된 gradlew 파일 때문입니다.
그레이들이 설치되지 않은 환경 혹은 버전이 다른 상황에서도 해당 프로젝트에 한해서 그레이들을 쓸 수 있도록 지원하는 Wrapper 파일입니다.
해당 파일을 직접 이용하기 때문에 별도로 설치할 필요가없습니다.

8.2 배포스크립트 만들기
작성한 코드를 실제 서버에 반영하는 것을 배포라고 합니다.
이책에서 배포라하면 다음의 과정을 모두 포괄하는 의미라고 보면됩니다.
-git clone 혹은 git pull을 통해 새버전의 프로젝트 받음
-Gradle이나 Maven을 통해 프로젝트 테스트와 빌드
-EC2 서버에서 해당 프로젝트 실행 및 재실행

앞선 과정을 배포할때마다 개발자가 하나하나 명령어를 실행하는 것은 불편함이 많습니다.
그래서 이를 쉘스크립트로 작성해 스크립트만 실행하면 앞의 과정이 차례로 진행되도록 하겠습니다.
참고로 쉘 스크립트와 빔(VIM)은 서로 다른 역할을 합니다.
쉘스크립트는 .sh 라는 파일확장자를 가진 파일입니다. 노드 JS가 .js라는 파일을 통해 서버에서 작동하는것처럼
쉘 스크립트 역시 리눅스에서 기본적으로 사용할 수 있는 스크립트 파일의 한 종류입니다.
빔은 리눅스 환경과 같이 GUI(윈도우와 같이 마우스를 사용할 수 있는 환경)가 아닌 환경에서 사용할 수 있는 편집 도구입니다.
리눅스에선 빔 외에도 이맥스(Emacs), 나노(NANO)등의 도구를 지원합니다만, 가장 대중적인 도구가 빔이다보니 이 책에서도 역시 빔으로 리눅스 환경에서의 편집을 진행하겠습니다.
~/app/step1/에 deply.sh 파일을 하나 생성합니다.

vim ~/app/step1/deploy.sh

혹시나 빔을 처음 사용하는 분이라면, 빔은 기타 에디터와 다르게 빔만의 사용법이 있습니다.
처음 시작하는 경우, 분명 쉽지 않겠지만, 자동화와 서버환경에서 다양한 이점이 많으니 이번 기회에 알아두면 도움이 될 것입니다.
간단한 튜토리얼을 보고 시작해봅시다. 간단한 사용법 정도만 빠르게 익혀보겠습니다. 추천하는 빔 가이드를 참고해서 익히길 바랍니다.(http://bit.ly/2Q3Bpvz)
빔의 사용법을 알고있다면 다음의 코드를 추가합니다.

[전체코드, 주석 설명은 아래에 있습니다.]
--------------------------------------------------------------
#!/bin/bash

REPOSITORY=/home/ec2-user/app/step1
PROJECT_NAME=freelec-springboot2-webservice

cd $REPOSITORY/$PROJECT_NAME/

echo "> Git Pull"

git pull

echo "> 프로젝트 Build 시작"

./gradlew build

echo "> step1 디렉토리 이동"

cd $REPOSITORY

echo "> Build 파일 복사"

cp $REPOSITORY/$PROJECT_NAME/build/libs/*.jar $REPOSITORY/

echo "> 현재 구동중인 애플리케이션 pid 확인"

CURRENT_PID=${pgrep -f ${PROJECT_NAME}.*.jar)

echo "현재 구동 중인 애플리케이션 pid: $CURRENT_PID"

if [ -z "$CURRENT_PID" ]; then
    echo "> 현재 구동 중인 애플리케이션이 없으므로 종료하지 않습니다."
else
    echo "> kill -15 $CURRENT_PID"
    kill -15 $CURRENT_PID
    sleep 5
fi

echo "> 새 애플리케이션 배포"

JAR_NAME=$(ls -tr $REPOSITORY/ | grep jar | tail -n 1)

echo "> JAR Name : $JAR_NAME"

nohup java -jar $REPOSITORY/$JAR_NAME 2>&1 &

----------------------------------------------------------


--설명--
(1) REPOSITORY=/home/ec2-user/app/step1 : 프로젝트 디렉토리 주소는 스크립트 내에서 자주 사용하는 값이기 때문에 이를 변수로 저장합니다.
: 마찬가지로 PROJECT_NAME=freelec-springboot2-webservice 도 동일하게 변수로 저장합니다.
: 쉘에서는 타입 없이 선언하여 저장합니다.
: 쉘에서는 $변수명으로 변수를 사용할 수 있습니다.

(2) cd $REPOSITORY/$PROJECT_NAME/ : 제일 처음에 git clone 받았던 디렉토리로 이동합니다.
: 바로 위의 쉘 변수 설명을 따라 /home/ec2-user/app/step1/freelec-springboot2-webservice 주소로 이동합니다.

(3) git pull : 디렉토리 이동후, master 브랜치의 최신내용을 받습니다.

(4) ./gradlew build : 프로젝트 내부의 gradlew 로 build를 수행합니다.

(5) cp $REPOSITORY/$PROJECT_NAME/build/libs/*.jar $REPOSITORY/ : build의 결과물인 jar 파일을 복사해 jar 파일을 모아둔 위치로 복사합니다.

(6) CURRENT_PID=$(pgrep -f ${PROJECT_NAME}.*.jar) : 기존에 수행 중이던 스프링 부트 애플리케이션을 종료합니디ㅏ.
: pgrep 은 process id만 추출하는 명령어입니다.
: -f 옵션은 프로세스 이름으로 찾습니다.

(7) if ~ else ~ fi : 현재 구동중인 프로세스가 있는지 없는지를 판단해서 기능을 수행합니다.
: process id값을 보고 프로세스가 있으면 해당 프로세스를 종료합니다.

(8) JAR_NAME=$(ls -tr $REPOSITORY/ | grep jar | tail -n 1) : 새로 실행할 jar 파일명을 찾습니다.
: 여러 jar 파일이 생기기 때문에 tail -n로 가장 나중의 jar파일(최신파일)을 변수에 저장합니다.

(9) nohup java -jar $REPOSITORY/$JAR_NAME 2>&1 & : 찾은 jar파일명으로 해당 jar파일을 nohup으로 실행합니다.
: 스프링 부트의 장점으로 특별히 외장 톰캣을 설치할 필요가 없습니다.
: 내장 톰캣을 사용해서 jar파일만 있으면 바로 웹 애플리케이션 서버를 실행할 수 있습니다.
: 일반적으로 자바를 실행할때는 java -jar 라는 명령어를 사용하지만, 이렇게하면 사용자가 터미널 접속을 끊을떄 애플리케이션도 같이 종료됩니다.
: 애플리케이션 실행자가 터미널을 종료해도 애플리케이션은 계속 구동될 수 있도록 nohup 명령어를 사용합니다.

이렇게 생성한 스크립트에 실행권한을 추가합니다.

chmod +x ./deploy.sh

그리고 다시 확인해보면 x 권한이 추가된 것을 확인할 수 있습니다.

ll 을 입력합니다.
그러면 권한이 나옵니다.

이제 이 스크립트를 다음 명령어로 실행합니다.
./deploy.sh

그럼 다음과 같이 로그가 출력되며 애플리케이션이 실행됩니다.
----------------------로그------------------
> Git Pull
이미 업데이트 상태입니다.
> 프로젝트 Build 시작

Buld SuccessFul in 2s
6 actionable tasks : 6 up-to-date
> step1 디렉토리로 이동
> Build 파일복사
> 현재 구동중인 애플리케이션 pid 확인
현재 구동중인 애플리케이션 pid :
> 현재 구동 중인 애플리케이션이 없으므로 종료하지 않습니다.
> 새 애플리케이션 배포
> JAR Name : freelec-springboot2-webservice-1.0-SNAPSHOT.jar
[ec2-user@freelec-springboot2-webservice step1]$ nohup : appending output to 'nohup.out'

잘 실행되었으니 nohup.out 파일을 열어 로그를 보겠습니다.
nohup.out은 실행되는 애플리케이션에서 출력되는 모든 내용을 갖고 있습니다.

vim nohup.out

nohup.out 제일 아래로 가면 ClientReigstrationRepository를 찾을 수 없다(that could not be found.)는 에러가 발생하면
애플리케이션 실행에 실패했다는 것을 알 수 있습니다.

***************************
APPLICATION FAILED TO START
***************************
Description:
Method springSecurityFilterChain in org.springframework.security.config.annotation.web.configuration.WebSecurityConfiguration required a bean of type 'org.springframework.security.oauth2.client.registration.ClientRegistrationRepository' that could not be found.
The following candidates were found but could not be injected:
        - Bean method 'clientRegistrationRepository' in 'OAuth2ClientRegistrationRepositoryConfiguration' not loaded because OAuth2 Clients Configured Condition registered clients is not available
Action:
Consider revisiting the entries above or defining a bean of type 'org.springframework.security.oauth2.client.registration.ClientRegistrationRepository' in your configuration.PPLICATION FAILED TO START
***************************
Description:
Method springSecurityFilterChain in org.springframework.security.config.annotation.web.configuration.WebSecurityConfiguration required a bean of type 'org.springframework.security.oauth2.client.registration.ClientRegistrationRepository' that could not be found.
The following candidates were found but could not be injected:
        - Bean method 'clientRegistrationRepository' in 'OAuth2ClientRegistrationRepositoryConfiguration' not loaded because OAuth2 Clients Configured Condition registered clients is not available
Action:
Consider revisiting the entries above or defining a bean of type 'org.springframework.security.oauth2.client.registration.ClientRegistrationRepository' in your configuration.

왜 이렇게 되었을까요??

8.3 외부 Security 파일 등록하기
이유는 다음과 같습니다. CLientRegistrationRepository를 생성하려면 clientId와 clinetSecret가 필수입니다. 로컬 PC에서 실행할때는 application-oauth.properties가 있어 문제가 없었습니다.
하지만 이 파일은 .gitignore로 git에서 제외 대상이라 깃허브에는 올라가있지 않습니다.
애플리케이션을 실행하기 위해 공개된 저장소에 ClientId와 ClientSecret을 올릴 수는 없으니 서버에서 직접 이 설정들을 가지고 있게 하겠습니다.

이 책의 예제는 모두 깃허브의 공개된 저장소를 기반으로 합니다. 이후에 사용하게 될 CI 서비스인 Travis CI는 비공개된 저장소를 사용할 경우 비용이 부과됩니다.
먼저 step1이 아닌 app 디렉토리에 properties 파일을 생성합니다.

vin /home/ec2-user/app/application-oauth.properties

그리고 로컬에 있는 application-oauth.properties 파일 내용을 그대로 붙여넣기를 합니다. 해당 파일을 저장하고 종료합니다.(:wq)
그리고 방금 생성한 application-oauth.properties을 쓰도록 deploy.sh 파일을 수정합니다.

nohup java -jar \
    -Dspring.config.location=classpath:/application.properties, /home/ec2-user/app/application-oauth.properties \
    $REPOSITORY/$JAR_NAME 2>&1 &

여기서 계속해서
org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'securityConfig': Unsatisfied dependency expressed through method 'setContentNegotationStrategy'
이런 오류와
./deploy.sh: line 46: /home/ec2-user/app/step1/room_reservation-1.0-SNAPSHOT.jar: Permission denied
 -Dspring.config.location=classpath:/application.properties,/home/ec2-user/app/application-oauth.properties: No such file or directory
이런 오루들이 나왔는데
저기서 '\' 는 단지 글단락이 움직였고, 실제로는 움직이지 않는다는 표현입니다.... 저걸 그대로 써서 계속해서 application-oauth.properties를 찾지 못했습니다..

-Dspring.config.location : 스프링 설정파일 위치를 지정합니다.
: 기본 옵션들을 담고있는 application.properties과 OAuth 설정들을 담고 있는 application-oauth.properties의 위치를 지정합니다.
: classPath가 붙으면 jar안에 있는 resources 디렉토리를 기준으로 경로가 생성됩니다.
: application-oauth.properties 은 절대 경로를 사용합니다. 외부에 파일이 있기 떄문입니다.

수정이 다 되었다면 다시 deploy.sh를 실행해봅니다.
그럼! 다음과 같이 정상적으로 실행된 것을 확인할 수 있습니다.
2023-03-11 17:04:03.153  INFO 27495 --- [           main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)
2023-03-11 17:04:03.246  INFO 27495 --- [           main] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2023-03-11 17:04:03.246  INFO 27495 --- [           main] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.22]
2023-03-11 17:04:03.453  INFO 27495 --- [           main] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2023-03-11 17:04:03.453  INFO 27495 --- [           main] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 5116 ms
2023-03-11 17:04:03.904  INFO 27495 --- [           main] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...
2023-03-11 17:04:04.215  INFO 27495 --- [           main] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start completed.
2023-03-11 17:04:04.387  INFO 27495 --- [           main] o.hibernate.jpa.internal.util.LogHelper  : HHH000204: Processing PersistenceUnitInfo [

사실 좀 실행되고서 시간이 지난뒤 spring bean config 에러가 나오는데 그냥 일단은 진행합니다..;;



자 그럼 마지막으로 RDS에 접근하는 설정도 추가해보겠습니다.

8.4 스피링 부트 프로젝트로 RDS 접근하기
RDS는 MariaDB를 사용 중입니다. 이 MariaDB에서 스프링부트 프로젝트를 실행하기 위해선 몇가지 작업이 필요합니다.
진행할 작업은 다음과 같습니다.
-테이블 생성 : H2에서 자동 생성해주던 테이블들을 MariaDB에선 직접 쿼리를 이용해 생성합니다.
-프로젝트 설정 : 자바 프로젝트가 MariaDB에 접근하려면 데이터베이스 드라이버가 필요합니다. MariaDB에서 사용가능한 드라이버를 프로젝트에 추가합니다.
-EC2(리눅스 서버) 설정 : 데이터베이스의 접속 정보는 중요하게 보호해야할 정보입니다. 공개되면 외부에서 데이터를 모두 가져갈 수 있기 때문입니다.
프로젝트 안에 접속정보를 갖고있다면 깃허브와 같이 오픈된 공간에선 누구나 해킹할 위험이 있습니다. EC2 서버 내부에선 접속 정보를 관리하도록 설정합니다.

RDS 테이블 생성
먼저 RDS에 테이블을 생성하겠습니다. 여기선 JPA가 사용될 엔티티테이블과 스프링 세션이 사용될 테이블 2가지 종류를 생성합니다.
JPA가 사용하라 테이블은 테스트코드 수행시 로그로 생성되는 쿼리를 사용하면 됩니다. Hibernate에서 생성해줘서 다 로그에 남습니다.
테스트 코드를 수행하면 다음과 같이 로그가 발생하니 create table부터 복사하여 RDS에 반영합니다.

create table posts (id bigint not null auto_increment, created_date datetime, modified_date datetime, author varchar(255), content TEXT not null, title varchar(500) not null, primary key (id)) engine=InnoDB
create table user (id bigint not null auto_increment, created_date datetime, modified_date datetime, email varchar(255) not null, name varchar(255) not null, picture varchar(255), role varchar(255) not null, primary key (id)) engine=InnoDB

스프링 세션 테이블은 schema-mysql.sql 파일에서 확인할 수 있습니다.
File 검색(Mac에선 Command+Shift+O, 윈도우/리눅스 에선 Ctrl+Shift+N)으로 찾습니다.
검색어에 schema-mysql.sql 이라고 검색합니다.
그러면 schema-mysql.sql 이라는 파일이 2개 나오는데 저는 맨위에것을 가져왔습니다.
내용물은 같은데 파일이 2개가 있습니다.
해당 파일에는 다음과 같은 세션 테이블이 있습니다.
이것 역시 복사하여 RDS에 반영합니다. RDS에 필요한 테이블은 모두 생성하였으니 프로젝트 설정으로 넘어갑니다.

--세션테이블---

CREATE TABLE SPRING_SESSION (
	PRIMARY_ID CHAR(36) NOT NULL,
	SESSION_ID CHAR(36) NOT NULL,
	CREATION_TIME BIGINT NOT NULL,
	LAST_ACCESS_TIME BIGINT NOT NULL,
	MAX_INACTIVE_INTERVAL INT NOT NULL,
	EXPIRY_TIME BIGINT NOT NULL,
	PRINCIPAL_NAME VARCHAR(100),
	CONSTRAINT SPRING_SESSION_PK PRIMARY KEY (PRIMARY_ID)
) ENGINE=InnoDB ROW_FORMAT=DYNAMIC;

CREATE UNIQUE INDEX SPRING_SESSION_IX1 ON SPRING_SESSION (SESSION_ID);
CREATE INDEX SPRING_SESSION_IX2 ON SPRING_SESSION (EXPIRY_TIME);
CREATE INDEX SPRING_SESSION_IX3 ON SPRING_SESSION (PRINCIPAL_NAME);

CREATE TABLE SPRING_SESSION_ATTRIBUTES (
	SESSION_PRIMARY_ID CHAR(36) NOT NULL,
	ATTRIBUTE_NAME VARCHAR(200) NOT NULL,
	ATTRIBUTE_BYTES BLOB NOT NULL,
	CONSTRAINT SPRING_SESSION_ATTRIBUTES_PK PRIMARY KEY (SESSION_PRIMARY_ID, ATTRIBUTE_NAME),
	CONSTRAINT SPRING_SESSION_ATTRIBUTES_FK FOREIGN KEY (SESSION_PRIMARY_ID) REFERENCES SPRING_SESSION(PRIMARY_ID) ON DELETE CASCADE
) ENGINE=InnoDB ROW_FORMAT=DYNAMIC;



프로젝트 설정
먼저 MariaDB 드라이버를 build.gradle에 등록합니다. (현재는 H2 드라이버만 있는 상태입니다.)
compile("org.mariadb.jdbc:mariadb-java-client")
springboot 2.xx에서는     //MariaDB 드라이버
implementation("org.mariadb.jdbc:mariadb-java-client") 이렇게 변했습니다. implementation을 사용합니다.


그리고 서버에서 구동될 환경을 하나 구성합니다. (여기서 환경이란 스프링의 profile을 이야기합니다.)
src/main/resources/에 application-real.properties 파일을 추가합니다.
[\room_reservation\src\main\resources\application-real.properties]
앞에서 이야기한대로 application-real.properties 로 파일을 만들면 profile=real 인 환경이 구성된다고 보면 됩니다.
실제 운영될 환경이기 때문에 보안/로그상 이슈가 될만한 설정들을 모두 제거하며 RDS 환경 profile 설정이 추가됩니다.

spring.profiles.include=oauth,real-db
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MYSQL5InnoDBDialect
spring.session.store-type=jdbc

모든 설정이 되었다면 깃허브로 푸시합니다.

---EC2 설정---
OAuth와 마찬가지로 RDS 접속정보도 보호해야할 정보이니 EC2 서버에 직접 설정파일을 둡니다.
app 디렉토리에 application-real-db.properties 파일을 생성합니다.

vim ~/app/application-real-db.properties

그리도 다음과 같은 내용을 추가합니다.

spring.jpa.hibernate.ddl-auto=none
spring.datasource.url=jdbc:mariadb://rds주소:포트명(기본은 3306)/database이름
spring.datasource.username=db계정
spring.datasource.password=db계정 비밀번호
spring.datasource.driver-class-name=org.mariadb.jdbc.Driver

(1)spring.jpa.hibernate.ddl-auto=none : jpa로 테이블이 자동생성되는 옵션을 None(생성하지않음)으로 지정합니다.
:RDS에는 실제운영으로 사용될 테이블이니 절대 스프링 부트에서 새로 만들지 않도록 해야합니다.
:이 옵션을 하지 않으면 자칫 테이블이 모두 새로생성될 수 있습니다.
:주의해야하는 옵션입니다.

마지막으로 deploy.sh가 real profile을 쓸 수 있도록 다음과 같이 개선합니다.

...
nohup java -jar
    -Dspring.config.location=classpath:/application.properties, /home/ec2-user/app/application-oauth.properties,
    /home/ec2-user/app/application-real-db.properties, classpath:/application-real.properties
    -Dspring.profiles.active=real
    $REPOSITORY/$JAR_NAME 2>&1 &

에러사항:[https://github.com/jojoldu/freelec-springboot2-webservice/issues/82]
Unable to access jarfile application-real-db.properties 라는 에러가 계속해서 발생해서 도저히 이유를 찾을수가없었습니다.
첫번쨰로 application-real-db에서 db정보를 처음에 room-reservation-webservice인데, room_reservation_webservice라고 써있어서
해당 이유인가 해서 기대했지만 실패.
두번째로 \ 를 붙여야하나? 하지만 이건 그냥 한줄로 붙여주는것일뿐이기에 실패
마지막으로 (저도 같은 오류가 나서 여기 보고 도움 받았습니다!
      저는 properties 사이에 콤마 다음 공백을 넣었더니 오류가 나더라고요.
      저처럼 오류 나는 사람들을 위해서 한마디 남깁니다ㅎㅎ)
콤마 이후에 공백이 있어서 오류메세지를 보면 [Unable to access jarfile application-real-db.properties,] 여기보면 마지막에 "," 이 있다.
그렇다. 앞에 ", Unable to access jarfile application-real-db.properties," 그러니 오류가났었던것...
nohup java -jar \
        -Dspring.config.location=classpath:/application.properties,/home/ec2-user/app/application-oauth.properties,/home/ec2-user/app/application-real-db.properties,classpath:/application-real.properties \
        -Dspring.profiles.active=real \
        $REPOSITORY/$JAR_NAME 2>&1 &

또 "\" 를 무조건 붙여야 작동한다... 그냥 책대로 따라해야한다. 문법인것같다. 한글자로 이어주는.

계속해서 curl localhost:8080할시 실패해서 더 찾아봤다.

The following profiles are active: oauth,real
[https://github.com/jojoldu/freelec-springboot2-webservice/issues/208]
[https://github.com/jojoldu/freelec-springboot2-webservice/issues/99]
예시와 달리 나는 The following profiles are active: oauth,real 이렇게만 뜨고, The following profiles are active: real-oauth,oauth,real-db,real
이렇게 안떳다. 즉, real-oauth와 real-db는 작동하지 않는거엇다.
ps -ef | grep java 를 통해 확인해도 내가 실행중인 jar파일이 보이지 않았따.

이유를 알아냈다...
The following profiles are active: oauth,real-db,real 이제 이렇게 바뀌엇는데 처음에 안됫었떤 이유는
이거 내가 room.html 뭐뭐시기해서 커밋하도록 정하지 않은 변경사항 그 오류 떳었는데 신경안쓰고 그냥하다가 오류난것입니다.
즉, 그 과정에서 내가 올린 application-oauth,real 같은 properties가 올라가지 않아서 그랬습니다..
intellij에서 gitstash와 같은 과정을 다 진행, ec2 재시작하고, putty에 다시 clone받고, ./gradlew room 하고 deploy하니 성공..
[해당 오류 : git(stash) 새로 git clone https://github.com/jojoldu/freelec-springboot2-webservice/issues/473]
(1)Dspring.profiles.active=real : application-real.properties를 활성화시킵니다.
:application-real.properties의 spring.profiles.include=oauth,real-db 옵션 때문에 real-db 역시 함께 활성화 대상에 포함됩니다.
자 이렇게 설정된 후 다시 한번 deploy.sh를 실행해봅니다. nohup.out 파일을 열어 다음과 같이 로그가 보인다면 성공적으로 수행된 것입니다.

   .   ____          _            __ _ _
  /\\ / ___'_ __ _ _(_)_ __  __ _ \ \ \ \
 ( ( )\___ | '_ | '_| | '_ \/ _` | \ \ \ \
  \\/  ___)| |_)| | | | | || (_| |  ) ) ) )
   '  |____| .__|_| |_|_| |_\__, | / / / /
  =========|_|==============|___/=/_/_/_/
  :: Spring Boot ::        (v2.1.7.RELEASE)

 2023-03-12 10:52:36.236  INFO 12641 --- [           main] com.room.reservation.Application         : Starting Application on room-reservation-webservice.localdomain with PID 12641 (/home/ec2-user/app/step1/room_reservation-1.0-SNAPSHOT.jar started by ec2-user in /home/ec2-user/app/step1)
 2023-03-12 10:52:36.254  INFO 12641 --- [           main] com.room.reservation.Application         : The following profiles are active: oauth,real-db,real
 2023-03-12 10:52:39.035  INFO 12641 --- [           main] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data repositories in DEFAULT mode.

curl 명렁어로 html 코드가 정상적으로 보인다면 성공입니다!

curl localhost:8080

마지막으로 실제 브라우저에서 로그인을 시도해보겠습니다.

8.5 EC2에서 소셜 로그인하기
curl 명령어를 통해 EC2에 서비스가 잘 배포된 것은 확인하였습니다.
이제 브라우저에서 확인해볼텐데, 그 전에 다음과 같은 몇가지 작업을 해보겠습니다.

- AWS 보안그룹 변경
먼저 EC2에 스프링 부트 프로젝트가 8080포트로 배포되었으나, 8080포트가 보안그룹에 열려있는지 확인합니다.

8080 열려있다면 Ok,안되어있다면 [편집]버튼을 눌러 추가해줍니다.

AWS EC2 도메인으로 접속
왼쪽 사이드바의 [인스턴스] 메뉴를 클릭합니다. 본인이 생성한 EC2인스턴스를 선택하면 다음과 같이 상세정보에서 퍼블릭 DNS를 확인할 수 있습니다.

이 주소가 EC2에 자동으로 할당된 도메인입니다. 인터넷이 되는 장소 어디나 이 주소를 입력하면 우리의 EC2서버에 접근할 수 있습니다.
자 그럼 이제 이 도메인 주소에 8080 포트를 붙여 브라우저에 입력합니다.
[publicIPV4DNS:8080]  을 입력합니다.

우리서비스가 이제 도메인을 가진 서비스가 되었습니다! 여기까지 하면 끝일까요? 작업이 하나 더 남았습니다.
현재 상태에서는 해당 서비스에 EC2의 도메인을 등록하지 않았기 때문에 구글과 네이버 로그인이 작동하지 않습니다.(localhost만 등록한 것 기억나나요?)
그래서 차례로 서비스에 등록하겠습니다. 먼저 구글에 등록합니다.
구글에 EC2 주소 등록
구글 웹 콘솔(https://console.cloud.google.com/home/dashboard)로 접속하여 본인의 프로젝트로 이동한 다음 [API 및 서비스 -> 사용자 인증 정보] 로 이동합니다.

[OAuth 동의화면] 탭을 선택하고 아래에서 승인된 도메인에 'http://' 없이 EC2의 퍼블릭 DNS를 등록합니다.
[사용자 인증정보] 탭을 클릭해서 본인이 등록한 서비스의 이름을 클릭합니다.
[사용자 인증정보] - [OAuth2.0클라이언트 ID] 퍼블릭 DNS 주소에 :8080/login/oauth2/code/google 주소를 추가하여 승인된 리디렉션 URL에 등록합니다.

이렇게 하면 모든 작업이 끝났습니다!
EC2 DNS 주소로 이동해서 다시 구글 로그인을 시도해보면 다음과 같이 로그인이 정상적으로 수행되는것을 확인할 수 있습니다.

네이버에 EC2 주소등록
네이버 개발자 센터(https://developers.naver.com/apps/#/myapps)로 접속해서 본인의 프로젝트로 이동합니다.
아래로 내려가보면 PC웹 항목이 있는데 여기서 서비스 URL과 Callback URL 2개를 수정합니다.
서비스 URL:(이전에는 http://localhost:8080/   localhost:8080에서는 따로 만들지않는 이상 테스트불가능해질듯) -> http:// (퍼블릭DNS주소)
네이버 아이디로 로그인 Callback URL http:// (public DNS address) EC2 퍼블릭 DNS : 8080/login/oauth2/code/naver

(1) 서비스 URL : 로그인을 시도하는 서비스가 네이버에 등록된 서비스인지 판단하기 위한 항목입니다.
: 8080 포트는 제외하고 실제 도메인 주소만 입력가능합니다.
: 네이버에서 아직 지원되지 않아 하나만 등록가능합니다.
: 즉, EC2의 주소를 등록하면 localhost가 안됩니다.
: 개발 단계에서는 등록하지 않는 것을 추천합니다.
: localhost도 테스트하고 싶으면 네이버 서비스를 하나 더 생성해서 키를 발급받으면 됩니다.

(2) callback url
: 전체 주소를 등록합니다.(EC2 퍼블릭 DNS : 8080/login/oauth2/code/naver)

2개 항목을 모두 수정/추가하였다면 구글과 마찬가지로 네이버 로그인을 시도합니다. 그럼 다음과 같이 로그인이 정상적으로 수행되는것을 확인할 수 있습니다.

구글과 네이버 로그인도 EC2와 연동완료되었습니다!
간단하게나마 스프링 부트 프로젝트를 EC2에 배포해보았습니다. 스크립트를 작성해서 간편하게 빌드와 배포를 진행한 것 같은데 불편한점을 느끼셨나요?
현재 방식은 몇가지 문제가 있습니다.
-수동실행되는 Test
    -본인이 짠 코드가 다른 개발자의 코드에 영향을 끼치지 않는지 확인하기 위해 전체 테스트를 수행해야만 합니다.
    -현재 상태에선 항상 개발자가 작업을 진행할때마다 수동으로 전체 테스트를 수행해야만 합니다.
-수동 Build
    -다른사람이 작성한 브랜치와 본인이 작성한 브랜치가 합쳐졌을떄 (Merge) 이상이 없는지는 Build를 수행해야만 알 수 있습니다.
    -이를 매번 개발자가 직접 실행해봐야만 합니다.

그래서! 다음장에는 이런 수동 Test & Build를 자동화시키는 작업을 진행하겠습니다.
깃허브에 푸시를 하면 자동으로 Test & Build & Deploy가 진행되도록 개선하는 작업입니다. 그럼 바로 진행해보겠습니다.




