이번장에서는 AWS라는 클라우드 서비스를 이용해 본격적으로 서버 배포를 진행해보겠습니다.
이미 클라우드를 서보신분들은 바로 다음절로 넘어가도 되지만 처음 클라우드를 접하시는 분들은 차례로 읽어보면 됩니다.
외부에서 본인이 만든 서비스에 접근하려면 24시간 작동하는 서버가 필수입니다.
24시간 작동하는 서버에는 3가지 선택지가 있습니다.

-집에 PC를 24시간 구동시킨다.
-호스팅 서비스(Cafe24, 코리아 호스팅 등)을 이용합니다.
-클라우드 서비스(AWS, AZURE, GCP 등)을 이용합니다.

일반적으로 비용은 호스팅 서비스나 집PC를 이용하는것이 저렴합니다. 만약 특정시간에만 트래픽이 몰린다면
유동적으로 사양을 늘릴 수 있는 클라우드가 유리합니다.
클라우드에 대해서 잠깐 이야기드리자면, 클라우드 서비스는 쉽게 말하면 인터넷(클라우드)를 통해 서버, 스토리지(파일저장소),
데이터베이스, 네트워크, 소프트웨어, 모니터링 등의 컴퓨팅 서비스를 제공하는 것입니다.
단순히 물리장비를 대여하는 것으로 생각하시는데, 그렇지는 않습니다.
예를들어 AWS의 EC2는 서버 장비를 대여하는 것이지만, 실제로는 그 안의 로그 관리, 모니터링, 하드웨어 교체, 네트워크 관리 등을 기본적으로 지원하고 있습니다.
개발자가 직접 해야할일을 AWS가 전부 지원을 하는 것입니다.
이런 클라우드에는 몇가지 형태가 있습니다.
(1) Infrastructure as a Service(IaaS, 아이아스, 이에스)
- 기존 물리장비를 미들웨어와 함께 묶어둔 추상화 서비스입니다.
- 가상머신, 스토리지, 네트워크, 운영체제 등의 IT 인프라를 대여해주는 서비스라고 보면됩니다.
- AWS의 EC2, S3 등

(2) Platform as a Service (PaaS, 파스)
- 앞에서 언급한 IaaS에서 한번 더 추상화한 서비스입니다.
- 한번 더 추상화했기 때문에 많은 기능이 자동화되어있습니다.
- AWS의 Beanstalk(빈스톡), Heroku(헤로쿠) 등

(3) Software as a Service (Saas, 사스)
- 소프트웨어 서비스를 이야기합니다.
- 구글 드라이브, 드랍박스, 와탭 등

이 책에서는 여러 클라우드 서비스(AWS, Azure, GCP 등) 중 AWS를 선택합니다.
이유는 다음과 같습니다.
- 첫 가입시 1년간 대부분 서비스가 무료입니다. 단, 서비스마다 제한이 있는데 이는 각 서비스를 설정할때 설명하겠습니다.
- 클라우드에서는 기본적으로 지원하는 기능(모니터링, 로그관리, 백업, 복구, 클러스터링 등등)이 많아 개인이나 소규모일때 개발에 좀 더 집중할수있습니다.
- 많은 기업이 AWS로 이전 중이기 때문에 이직할때 AWS 사용 경험은 도움이 됩니다. 국내에서는 AWS 점유율이 압도적입니다.
쿠팡, 우아한 형제들, 리벰버 등 클라우드를 사용할 수 있는 회사에서는 대부분 AWS를 사용합니다.
- 사용자가 많아 국내자료와 커뮤니티가 활성화되어있습니다.

이 책에서 진행하는 모든 AWS 서비스는 IaaS를 사용합니다. AWS의 PaaS 서비스인 빈스톡(BeanStalk)을 사용하면
대부분 작업이 간소화되지만, 프리티어로 무중단 배포가 불가능합니다.
배포할때마다 서버가 다운되면 제대로 된 서비스를 만들 수 없으니 무중단 배포는 필수이고 빈스톡은 사용할 수 없습니다.
그리고 AWS 초보자일때는 직접 하나씩 다 다뤄보는것이 공부하는데 도움이 됩니다.
자 그럼 이제 AWS 회원가입과 앞으로 배포할 서버인 EC2를 생성하고 설정해보겠습니다.

6.1 AWS 회원가입
AWS가입을 위해서는 한가지 필수 준비물이 있습니다.
Master 혹은 Visa 카드가 필요합니다. 본인의 카드 중 Master 혹은 Visa 카드를 준비한뒤 진행하겠습니다.
AWS 공식사이트(https://aws.amazon.com/ko/)로 이동한뒤 무료계정 만들기를 선택합니다.
[그림 . AWS메인화면. 신규로 생성할 AWS 계정정보를 등록합니다.]
신규로 생성할 AWS 계정정보를 등록합니다.
동의하고 다음으로 넘어가시면 영문주소 입력란이 등장합니다.
영문 주소는 다음과 같이 네이버에서 영문주소 검색을 하거나 본인의 주소 영문으로 검색하면되니 해당 정보를 입력합니다.
네이버로 확인한 영문주소를 기재합니다. 여기서 계정 유형은 개인으로 선택해야합니다.
다음은 결제 정보란입니다. 준비한 Master 혹은 Visa카드의 정보를 등록합니다.
이때 해당카드에는 최소 1달러가 결제가능해야합니다. 보안전송을 클릭하면 계좌확인을 위한 1달러 결제가 진행됩니다.
문자로 결제 성공알람이오면 휴대폰 정보와 보안문자를 기재합니다.
보안문자를 정상적으로 입력했다면 등록한 전화번호로 전달된 4자리 코드를 등록합니다.
마지막으로 지원플랜을 선택합니다. 무료로 사용하기 위함이니 무료기본플랜을 선택합니다.
여기까지 했으면 AWS 회원가입이 끝났습니다! 화면중앙에 있는 콘솔 로그인 버튼을 클릭해서 방금 가입한 정보로 로그인을 진행합니다.
가입할때 사용된 이메일주소와 비밀번호를 차례로 입력합니다.
정상적으로 로그인이 되셨으면 바로 EC2를 생성해보겠습니다.

6.2 EC2 인스턴스 생성하기
EC2(Elastic Compute Cloud)는 AWS에서 제공하는 성능, 용량 등을 유동적으로 사용할 수 있는 서버입니다.
보통 "AWS에서 리눅스 서버 혹은 윈도우 서버를 사용합니다." 라고하면 이 EC2를 이야기하는 것입니다.
EC2의 이름은 Elastic Compute Cloud에서 C가 2개가 있어 C2라는 이름이 붙었습니다.
AWS에서는 대부분 첫글자가 중복되면 숫자로 표기합니다. 비슷한 예로 AWS의 S3는 Simple Storage Service를 줄여서 S가 3개라고하여 S3입니다.
AWS에서 무료로 제공하는 프리티어 플랜에서는 EC2 사용에 다음과 같은 제한이 있습니다.
사양이 t2.micro만 가능합니다.
-vCPU(가상 CPU) 1 Core, 메모리 1GB 사양입니다.
-보통 vCPU는 물리 CPU 사양의 절반 정도의 성능을 가집니다.
-월 750 시간의 제한이 있습니다. 초과하면 비용이 부과됩니다.
- 24시간 * 31일 = 744 시간입니다. 즉, 1대의 t2.micro만 사용한다면 24시간 사용할 수 있습니다.

앞의 제한사항을 주의하면서 AWS를 사용하면 1년간 재미나게 써볼 수 있습니다.
자, 그럼 EC2를 만들기 전에, 본인의 리전을 확인해봅니다.
리전이란 AWS의 서비스가 구동될 지역을 이야기합니다. AWS는 도시별로 클라우드센터를 지어 해당센터에서 구축된 가상머신들을 사용할 수 있습니다.
이걸 리전이라고 합니다. 서울 리전이 생기기전까지는 국내서비스들은 도쿄리전을 사용했습니다. 한국과 가장 가까운 지역이라 가장 네트워크가 빠르기
때문입니다. 현재는 서울 리전이 잇어 국내에서 서비스한다면 무조건 서울 리전을 선택하면 됩니다.
다음과 같이 서울로 되어있지 않다면(보통은 처음 리전이 오아이주로 선택됩니다.) 서울로 변경합니다.
서울로 리전을 변경했다면 화면 중앙에 있는 검색창에서 ec2를 입력하여 EC2서비스를 클릭합니다.
EC2 대시보드가 나오는데, 여기서 중앙에 있는 [인스턴스 시작] 버튼을 클릭합니다. 인스턴스란 EC2 서비스에 생성된 가상머신을 이야기합니다.
VMWare와 같은 가상머신으로 리눅스를 설치해본 경험을 떠올려보면 됩니다.
인스턴스를 생성하는 첫 단계는 AMI(Amazon Machine Image, 아마존 머신 이미지)를 선택하는 것입니다.
먼저 AMI에 대해 설명하자면, AMI는 EC2 인스턴스를 시작하는데 필요한 정보를 이미지로 만들어둔 것을 이야기합니다.
인스턴스라는 가상머신에 운영체제 등을 설치할 수 있게 구워넣은 이미지로 새악하면 됩니다.
예를들어 리눅스 I AMI를 사용한다면 Amazon Linux 1 OS가 인스턴스에 설치되어 개발자가 사용할 수 있음을 의미합니다.
여기서는 Amazon Linux AMI를 선택합니다.(Amazon Linux AMI 2 가 아닙니다.)
아마존 리눅스 2 대신에 아마존 리눅스 1 을 선택한 이유는 아직 국내 자료가 리눅스 1이 더 많기 때문입니다.
보통 센토스(Centos) 6 버전으로 진행되는 자료들은 아마존 리눅스 1에서 모두 사용할 수 있습니다.
아마존 리눅스 2 는 센토스(Centos) 7 버전 자료들을 그대로 사용할 수 있습니다.
그럼 굳이 센토스 AMI를 사용하지 않고 아마존 리눅스 AMI를 사용한 이유가 무엇일까요?
이유는 다음과 같습니다.
- 아마존이 개발하고 있기 때문에 지원받기가 쉽다.
- 레드햇 베이스이므로 레드햇 계열의 배포판을 많이 다뤄본 사람일수록 문제없이 사용할 수 있습니다.
- AWS의 각종 서비스와의 상성이 좋습니다.
- Amazon 독자적인 개발 리포지터리를 사용하고 있어 yum 이 매우 빠릅니다.
AWS를 사용하는데 굳이 AWS에서 적극적으로 지원하는 운영체제를 선택하지 않을 이유가 없습니다. 아마존 리눅스 1 AMI를 선택하고 다음으로 넘어갑니다.
다음은 인스턴스 유형을 선택하는 단계입니다. 인스턴스 유형에서는 프리티어로 표기된 t2.micro를 선택합니다. (이외 다른 유형을 선택할경우 비용이 청구됩니다.)
[그림 6-15 인스턴스 유형선텍] General Purpose, t2.micro(프리티어 사용가능) vCPUs 1, 메모리 1 GIB, 인스턴스 스토리지(GB) EBS 전용
여기서 유형에 대해 짧게 소개하면 t2는 요금타입을 이야기하며, micro는 사양을 이야기합니다.
t2 외에 t3도 있으며 보통 이들을 T 시리즈 라고합니다. T 시리즈는 범용시리즈로 불리기도 합니다.
그만큼 다양한 사양을 사용할 수 있습니다.  (다른 시리즈는 nano, micro 등의 저사양이 존재하지 않습니다.)
이들은 다른 서비스와 달리 크레딧이란 일종의 CPU를 사용할 수 있는 포인트 개념이 있습니다. 인스턴스 크기에 따라 정해진 비율로 CPU 크레딧을 계속받게되며,
사용하지 않을때는 크레딧을 축적하고, 사용할때 이 크레딧을 사용합니다.
정해진 사양보다 더 높은 트래픽이 오면 크레딧을 좀 더 적극적으로 사용하면서 트래픽을 처리하지만, 크레딧이 모두 사용되면 더 이상 EC2를 사용할 수 없습니다.
그래서 트래픽이 높은 서비스들은 T 시리즈를 쓰지 않고 다른 시리즈를 사용하기도 합니다.
다만 그전까지는 활용도가 높기 때문에 시작하는 단계에서는 좋은 선택입니다.
다음 단계는 세부정보 구성입니다. 기업에서 사용할 경우 화면상에 표기된 VPC, 서브넷 등을 세세하게 다루지만, 여기서는 혼자서 1대의 서버만
사용하니 별다른 설정을 하지않고 넘어갑니다.
(vpc와 서브넷등은 AWS 서비스들의 네트워크 환경을 구성하는 정도로만 이해하면됩니다. 1인 개발시 혹은 대량의 서버를 사용하지 않는다면
굳이 별도로 구성할 필요가 없으므로 여기서는 기본 생성되는 값을 사용합니다. 혹시나 좀 더 제대로 된 구성을 해보고 싶으신 분들은
AWS만 다루는 다른 서적을 참고하면 됩니다.)

다음단계는 스토리지 선택입니다. 스토리지는 여러분이 하드디스크 라고 부르는 서버의 디스크(SSD 포함)를 이야기하며 서버의 용량을 얼마나 정할지
선택하는 단계입니다. 여기서 설정의 기본값은 8GB(기가바이트)입니다. 모르고 넘어가는 분들이 있는데 30GB까지 프리티어로 가능합니다.
물론 그 이상의 사이즈는 비용이 청구되니 프리티어의 최대치인 30GB로 변경합니다.
태그에는 웹 콘솔에서 표기될 태그인 Name태그를 등록합니다. 태그는 해당 인스턴스를 표현하는 여러 이름으로 사용될 수 있습니다.
EC2의 이름을 붙인다고 생각하고 넣으면 됩니다.(인스타그램, 페이스북 등 SNS의 태그와 동일한 역할을 합니다.)
여러 인스턴스가 있을경우 이를 태그별로 구분하면 검색이나 그룹 짓기 편하므로 여기서 본인 서비스의 인스턴스를 나타낼 수 있는 값으로 등록합니다.
[그림 6-18 태그추가, 키:Name, 값 : freelec-springboot2-webservice, 저는 room-reservation-webservice 라고 하겠습니다.

다음으로 보안그룹입니다. 보안그룹은 방화벽을 이야기합니다. '서버로 80 포트 외에는 허용하지 않는다.'는 역할을하는 방화벽이 AWS에서는
보안그룹으로 사용됩니다. 기존에 생성된 보안그룹이 없으므로 보안그룹 이름엔 유의미한 이름으로 변경합니다.
[그림 6-19 보안그룹추가, 보안그룹이름 : freelec-springboot2-webservice-ec2, 설명:ec2, vpc : 기본값,]
[보안그룹규칙 인바운드(AWS에 들어오는 요청방화벽)
유형 : HTTPS, 프로토콜 : TCP, 포트범위 443, 소스 사용자지정 0.0.0.0/0, ::/0
유형 : 사용자지정TC, 프로토콜 : TCP, 포트범위 8080, 소스 사용자지정 0.0.0.0/0, ::/0
유형 : SSH, 프로토콜 : TCP, 포트범위 22, 소스 내IP
이 보안그룹부분이 굉장히 중요한 부분입니다. 유형 항목에서 SSH이면서 포트항목에서 22인 경우는 AWS EC2에 터미널로 접속할때를 이야기합니다.
pem키가 없으면 접속이 안되니 전체 오픈(0.0.0.0/0, ::/0)하는 경우를 종종 발견합니다. 이렇게 되면 이후 파일 공유 디렉토리나 깃허브 등에 실수로
pem 키가 노출되는 순간 서버에서 가상화폐가 채굴되는 것을 볼 수 있습니다.

보안은 언제나 높을수록 좋으니 pem 키 관리와 지정된 IP에서만 SSH 접속이 가능하도록 구성하는것이 안전합니다.
그래서 본인 집의 IP를 기본적으로 추가하고(내 IP를 선택하면 현재 접속한 장소의 IP가 자동지정됩니다.)
카페와 같이 집외에 다른 장소에서 접속할때는 해당 장소의 IP를 다시 SSH 규칙에 추가하는것이 안전합니다.
현재 프로젝트의 기본 포트인 8080을 추가하고 [검토 및 시작] 버튼을 클릭합니다. 검토화면에서 보안그룹 경고를 하는데, 이는 8080이 전체 오픈이 되어서 발생합니다.
8080을 열어 놓는것은 위험한 일이 아니니 바로 [시작하기] 버튼을 클릭합니다.
인스턴스로 접근하기 위해서는 pem 키(비밀키)가 필요합니다. 그래서 인스턴스 마지막 단계는 할당할 pem 키를 선택하는 것입니다.
인스턴스는 지정된 pem키(비밀키)와 매칭되는 공개키를 가지고 있어, 해당 pem 키외에는 접근을 허용하지 않습니다.
일종의 마스터키이기 때문에 절대 유출되면 안됩니다.
pem 키는 이후 EC2 서버로 접속할때 필수파일이니 잘관리할 수 있는 디렉토리로 저장합니다.
기존에 생성된 pem 키가 있다면 선택하고 없다면 신규로 생성합니다.
[그림 6-21] 인스턴스 검토, 새 키페어 생성 , 키페어이름 : freelec-springboot-webservice, room-reservation-webservice. 키페어 다운로드합니다.
pem 키까지 내려받았다면 다음과 같이 인스턴스 생성 시작 페이ㅣㅈ로 이동하고 인스턴스 id를 클릭하여 EC2목록으로 이동합니다.
인스턴스가 생성중인것을 확인할 수 있으며 Name태그로 인해 Name이 노출되는것도 확인가능합니다.
생성이 다 되었다면 다음과 같이 IP와 도메인이 할당된 것을 확인할 수 있습니다.

인스턴스도 결국 하나의 서버이기 때문에 IP가 존재합니다.
인스턴스 생성시에 항상 새 IP를 할당하는데, 한가지 조건이 더 있습니다. 같은 인스턴스를 중지하고 다시 시작할때도 새 IP가 할당합니다.
즉, 요금을 아끼기 위해 잠깐 인스턴스를 중지하고 다시 시작하면 IP가 변경되는 것입니다. 이렇게 되면 매번 접속해야하는 IP가 변경돼서
PC에서 접근할때마다 IP주소를 확인해야합니다. 굉장히 번거로우므로 인스턴스의 IP가 매번 변경되지 않고 고정 IP를 가지게해야합니다.
그래서 고정 IP를 할당하겠습니다.

EIP 할당
AWS의 고정 IP를 Elastic IP(EIP, 탄력적 IP)라고 합니다. EC2 인스턴스 페이지의 왼쪽 카테고리[네트워크 및 보안]에서
탄력적 IP를 눌러 선택하고 주소가 없으므로 [새주소 할당]버튼을 클릭해서 바로 [할당] 버튼을 클릭합니다.
범위는 VPC, IPv4 주소풀은 Amazon 풀로 선택합니다.(내 소유가 아닙니다.)
새주소 할당이 완료되면 탄력적 IP가 발급됩니다. 방금 생성한 탄력적 IP와 방금 생성한 EC2 주소를 연결합니다.
방금 생성한 탄력적 IP를 확인하고, 페이지 위에 있는 [작업] 버튼 -> [주소연결] 메뉴를 선택합니다.
주소 연결을 위해 생성한 EC2 이름과 IP를 선택하고 [연결]버튼을 클릭합니다.
[그림 6-30, 해당 탄력적 IP주소를 연결할 인스턴스 또는 네트워크 인터페이스를 선택합니다. 리소스유형에 인스턴스, 인스턴스이름에
할당받은 EC2 이름과 프라이빗 IP주소를 입력합니다.]
연결이 완료되면 왼쪽 카테고리에 있는 [인스턴스] 탭을 클릭해서 다시 인스턴스 목록 페이지로 이동합니다.
해당 인스턴스의 퍼블릭, 탄력적 IP가 모두 잘연결되었는지 확인합니다.
여기까지 진행했으면 EC2 인스턴스 생성과정은 끝났습니다!
하지만, 주의할점이 있습니다. 방금 생성한 탄력적 IP는 무조건 EC2에 바로 연결해야하며 만약 더는 사용할 인스턴스가 없을때도 탄력적 IP를 삭제해야합니다.
마찬가지로 비용청구가 되므로 꼭 잊지않고 삭제해야합니다. 그럼 이제 로컬 PC에서 EC2 인스턴스로 접속해보겠습니다.

6.3 EC2 서버에 접속하기
방금 생성한 EC2로 접속을 해보겠습니다. 여기서는 많은 분이 사용하는 운영체제인 MAC과 윈도우를 나눠서 진행하겠습니다.
-Mac & Linux는 터미널
-윈도우는 putty
(오랜 시간 접속이 안되거나, 권한이 없어서 안된다고 메세지가 나온다면 다음과 같이 확인해봅니다.
- HostName값이 정확히 탄력적 IP로 되어있는지 확인
- EC2 인스턴스가 running 상태인지 확인
- EC2 인스턴스의 보안그룹 -> 인바운드 규칙에서 현재 본인의 IP가 등록되어있는지 확인.)

-Windows 로 접속하기
윈도우에서는 Mac과 같이 ssh로 접속하기엔 불편한점이 많아 별도의 클라이언트(putty)를 설치하겠습니다.
putty사이트(https://www.putty.org/)에 접속하여 실행파일을 내려받습니다.
실행파일은 2가지입니다. - putty.exe, -puttygen.exe 두 파일을 모두 내려받은뒤, puttygen.exe파일을 실행합니다.
putty는 pem 키로 사용이 안되며 pem 키를 ppk 파일로 변환을 해야만 합니다. puttygen은 이 과정을 진행해주는 클라이언트입니다.
puttygen화면에서 상단 [Conversions -> Import Key]를 선택해서 내려받은 pem 키를 선택합니다.
그럼 다음과 같이 자동으로 변환이 진행됩니다. [Save private key] 버튼을 클릭하여 ppk 파일을 생성합니다.
경고 메시지가 뜨면 [예]를 클릭하고 넘어갑니다.
ppk 파일이 저장될 위치와 ppk 이름을 등록합니다. ppk 파일이 잘 생성되었으면 putty.exe 파일을 실행하여 다음과 같이 각 항목을 등록합니다.
-HostName : username@public_ip 를 등록합니다. 우리가 생성한 Amazon Linux는 ec2-user가 username이라서 ec2-user@탄력적IP주소
를 등록하면 됩니다.
-Port : ssh 접속 포트인 22를 등록합니다.
-Connection type : SSH를 선택합니다.
항목들을 모두 채웠다면 왼쪽 사이드바에 있는 [Connection -> SSH -> Auth]를 차례로 클릭해서 ppk 파일을 로드할 수 있는 화면으로 이동합니다.
[Browse...]버튼을 클릭합니다. 좀전에 생성한 ppk 파일을 선택해서 불러옵니다.정상적으로 불러왔다면 다시 [Session] 탭으로 이동하여
[Saved Sessions] 에 현재 설정들을 저장할 이름을 등록하고 [Save] 버튼을 클릭합니다. 여기서 Session 이름은 freelec-springboot2-webservice로 했습니다.
저장한뒤 [Open] 버튼을 클릭하면 다음과 같이 SSH 접속 알림이 등장합니다. [예]를 클릭합니다.
그럼 다음과 같이 SSH 접속이 성공한 것을 확인할 수 있습니다.
Mac과 윈도우에서 모두 EC2 접속을 진행해보았습니다. 마지막으로 리눅스 운영서버에서 해야할 몇가지 설정 작업을 진행해보겠습니다.

6.4 아마존 리눅스 1 서버 생성시 꼭해야할 설정들
아마존 리눅스 1 서버를 처음 받았다면 몇가지 설정들이 필요합니다.
이 설정들은 모두 자바 기반의 웹 애플리케이션(톰캣과 스프링부트)가 작동해야하는 서버들에선 필수로 해야하는 설정들입니다.
-Java 8 설치 : 현재 이 프로젝트의 버전은 Java 8 입니다.
-타임존 변경 : 기본 서버의 시간은 미국 시간대입니다. 한국 시간대가 되어야만 우리가 사용하는 시간이 모두 한국시간으로 등록되고 사용됩니다.
-호스트네임 변경 : 현재 접속한 서버의 별명을 등록합니다. 실무에서는 한대의 서버가 아닌 수십대의 서버가 작동되는데, IP만으로 어떤 서버가 어떤
역할을 하는지 알 수 없습니다. 이를 구분하기 위해 보통 호스트네임을 필수로 등록합니다.

방금 진행한 EC2 접속 과정을 통해서 EC2에 접속한 뒤에 다음과정을 진행하면 됩니다.
-Java 8 설치
아마존 리눅스 1 의 경우 기본 자바버전이 7입니다. 이 책에서는 자바 8 을 기본으로 사용하므로 자바 8 을 EC2에 설치하겠습니다.
EC2에서 다음의 명령어를 실행합니다.
sudo yum install -y java-1.8.0-openjdk-devel.x86_64

설치가 완료되었다면 인스턴스의 Java 버전을 8로 변경하겠습니다.

sudo /usr/sbin/alternatives --config java

다음과 같이 선택화면에서는 Java8을 선택합니다.(저렇게 설치하면 안내문이 뜨면서 2개의 프로그램ㅇ ' java '를 제공합니다. 선택이 나오는데 jre1.8선택을위하여 2 입력).
버전이 변경되었으면 사용하지 않는 Java7을 삭제합니다.
sudo yum remove java-1.7.0-openjdk

현재 버전이 Java8이 되었는지 확인합니다.
Java -version

-타임존변경
EC2 서버의 기본 타임존은 UTC입니다. 이는 세계표준시간으로 한국의 시간대가 아닙니다. 즉, 한국의 시간과는 9시간 차이가 발생합니다.
이렇게 되면 서버에서 수행되는 Java 애플리케이션에서 생성되는 시간도 모두 9시간씩 차이가 나기 때문에 꼭 수정해야할 설정입니다.
서버의 타임존을 한국시간으로 변경하겠습니다.
다음 명령어를 차례로 수행합니다.

sudo rm /etc/localtime
sudo ln -s /usr/share/zoneinfo/Asia/Seoul /etc/localtime

정상적으로 수행되었다면 date 명령어로 타임존이 KST로 변경된 것을 확인할 수 있습니다.
date 를 입력해서 확인합니다.

-HostName 변경
여러 서버를 관리중일경우 IP만으로 어떤 서비스의 서버인지 확인이 어렵습니다. IP만 노출, ip-172-xx-xx-xxx가 무슨 서버인지 어떻게 알 수 있을까요?
그래서 각 서버가 어느 서비스인지 표현하기 위해 HostNAME을 변경하겠습니다. 다음 명령어로 편집파일을 열어봅니다.
sudo vim /etc/sysconfig/network

화면에서 노출되는 항목 중 HOSTNAME으로 되어있는 부분을 본인이 원하는 서비스명으로 변경합니다.
--변경전--
NETWORKING=yes
HOSTNAME=localhost.localdomain
NOZEROCONF=yes

--변경후--
NETWORKING=yes
HOSTNAME=freelect-springboot2-webservice ( 저는 room-reservation-webservice )
NOZEROCONF=yes

변경한 후 다음 명령어로 서버를 재부팅합니다.
sudo reboot

재부팅이 끝나고 나서 다시 접속해보면 HOSTNAME이 잘 변경된 것을 확인할 수 있습니다.
HOSTNAME이 등록되었다면 한가지 작업을 더 해야합니다. 호스트 주소를 찾을때 가장 먼저 검색해보는 /etc/hosts에 변경한 hostname을 등록합니다.
hostname이 /etc/hosts/에 등록되지 않아 발생한 장애에 대한 자세한 내용은 우아한 형제들의 기술 블로그에 기록되어 있으니 한번 읽어보길 권합니다.
'빌링 시스템 장애, 이러지말란 Maria~'(http://woowabros.github.io/experience/2017/01/20/billing-event.html)

다음명령어로 /etc/hosts 파일을 열어봅니다.
sudo vim /etc/hosts

다음과 같은 화면에 방금 등록한 HOSTNAME을 등록합니다.
127.0.0.1 등록한 HOSTNAME

:wq 명령어로 저장하고 종료한뒤 정상적으로 등록되었는지 확인해봅니다. 확인방법은 다음 명령어로 합니다.
curl 등록한 호스트 이름

만약 잘못 등록되었다면 찾을 수 없는 주소라는 에러가 발생합니다.
/etc/hosts에 등록 실패인경우 curl : (6) Could not resolve host:freelec-psringboot2-webserivce

잘 등록하였다면 다음과 같이 80포트로 접근이 안된다는 에러가 발생합니다.
그림6-60 /etc/hosts에 등록성공인 경우 curl : (7) Failed to connect to freelec-psringboot2-webserivce port 80 : Connection refused
이는 아직 80포트로 실행된 서비스가 없음을 의미합니다. 즉, curl 호스트 이름으로 실행은 잘되었음을 의미합니다.

아직은 리눅스의 명령어가 익숙하지 않아서 어려울 수 있습니다. 그러나 장을 거듭하면서 계속된 명령어 사용으로 금방 익숙해질 것입니다.
이번 장에서 완성된 EC2 서버가 앞으로 계속 사용될 서버이니 꼭 이 과정을 다 진행해야합니다. EC2 설정이 완료되었으니 이제 AWS의
데이터베이스 서비스인 RDS를 생성하고 설정해보겠습니다.


-------------------------------------------AWS RDS--------------------------------------------------------
웹서비스의 백엔드를 다룬다고 했을대 애플리케이션 코드를 작성하는 것만큼 중요한것이 데이터베이스를 다루는 일입니다.
규모있는 회사에서는 데이터베이스를 전문적으로 처리하는 DBA라는 직군 담당자들이 있습니다. 해당 전문분야의 담당자가 있기에 상대적으로 개발자가
데이터베이스를 전문적으로 다룰일이 적습니다.
다만 그건 대용량/대량의 데이터를 다루기 때문에 전문성이 필요한 것이지, 백엔드 개발자가 데이터베이스를 몰라도된다를 의미하지는 않습니다.
스타트업이나 개발 인원수가 적은 서비스에선 개발자가 데이터베이스를 다뤄야만 합니다.
어느정도의 데이터베이스 구축, 쿼리 튜닝에 대해서 기본적인 지식이 필요합니다. 이번장에서는 데이터베이스를 구축하고 앞장에서 만든
EC2 서버와 연동을 해보겠습니다. 다만, 직접 데이터베이스를 설치하지 않습니다.
직접 데이터베이스를 설치해서 다루게 되면 모니터링, 알람, 백업, HA 구성등을 모두 직접 해야합니다.
처음 구축할때 며칠이 걸릴 수 있는 일입니다.
AWS에서는 앞에서 언급한 작업을 모두 지원하는 관리형 서비스인 RDS(Relational Database Service)를 제공합니다.
RDS는 AWS에서 지원하는 클라우드 기반 관계형 데이터베이스입니다.
하드웨어 프로비저닝, 데이터베이스 설정, 패치 및 백업과 같이 잦은 운영작업을 자동화하여 개발자가 개발에 집중할 수 있게 지원하는 서비스입니다.
추가로 조정 가능한 용량을 지원하여 예상치 못한 양의 데이터가 쌓여도 비용만 추가로 내면 정상적으로 서비스가 가능한 장점도 있습니다.
이러한 RDS를 이용하여 본인만의 데이터베이스 환경을 구축해보겠습니다.

7.1 RDS 인스턴스 생성하기
먼저 RDS 인스턴스를 생성하겠습니다. 다음과 같이 검색창에 rds를 입력해서 선택하고, RDS 대시보드에서 [데이터베이스 생성] 버튼을 클릭합니다.
RDS 생성 과정이 진행됩니다. DB엔진 선택 화면에서 Maria DB를 선택하도록 하겠습니다.
여기서 잠깐, 왜 MariaDB를 골라야하는지 궁금증이 생길 수 있습니다. RDS에는 오라클, MSSQL, PostgreSQL 등이 있으며
당연히 본인이 가장 잘 사용하는 데이터베이스를 고르면되지만, 꼭 다른 데이터베이스를 선택해야할 이유가 있는 것이 아니라면 MySQL, MariaDB,PostgreSQL
중에 고르길 추천합니다. 필자는 그중에서도 MariaDB를 추천하며 이유를 소개합니다.
-가격
-Amazon Aurora(오로라)교체 용이성
RDS의 가격은 라이센스 비용 영향을 받습니다. 상용 데이터베이스인 오라클, MSSQL이 오픈소스인 MYSQL, MariaDB, PostgreSQL보다는
동일한 사양 대비 더 가격이 높습니다. 결국 프리티어 기간인 1년이 지나면 비용을 지불하면서 RDS를 써야합니다. 비용문제를 생각해볼 필요가 있습니다.
두번째로 Amazon Aurora 교체 용이성입니다. Amazon Aurora는 AWS에서 MySQL과 PostgreSQL을 클라우드 기반에 맞게 재구성한 데이터베이스입니다.
공식자료에 의하면 RDS MySQL 대비 5배, RDS PostgreSQL 보다 3배의 성능을 제공합니다. 더군다나 AWS에서 직접 엔지니어링하고 있기 때문에
계속해서 발전하고 있습니다. 현재도 다른 데이터베이스와 비교해 다양한 기능을 제공하고 있습니다.
클라우드 서비스에 가장 적합한 데이터베이스이기 때문에 많은 회사가 Amazon Aurora를 선택합니다. 그러다보니 호환대상이 아닌 오라클, MSSQL을 굳이 선택할 필요가 없습니다.
이렇게 보면 Aurora를 선택하면 가장 좋을 것같지만 시작하는 단계에서 Aurora를 선택하기 어렵습니다. 프리티어 대상이 아니며, 최저비용이 월10만원 이상이기 때문에 부담스럽습니다.
그래서 일단은 MariaDB로 시작하겠습니다. 차후 서비스 규모가 일정규모이상 커진 후에 Maria DB에서 Aurora로 이전하면됩니다.
MariaDB에 대해 생소할 분들이 있을 것 같아 잠깐 소개하고 넘어가겠습니다. 국내외를 가리지 않고 오픈소스 데이터베이스중 가장 인기있는 제품을 고르라고하면
MySQL을 꼽습니다. 단순 쿼리 처리성능이 어떤 제품보다 압도적이며 이미 오래사용되어왔기 때문에 성능과 신뢰성등에서 꾸준히 개선되어 온것도 장점입니다.
발전하던 MySQL이 2010년에 썬마이크로시스템즈와 오라클이 합병되면서 많은 MySQL 개발자들은 썬마이크로시스템즈를 떠나며 본인만의 프로젝트를 진행하게됩니다.
이중 MySQL의 창시자인 몬티 와이드니어가 만든 프로젝트가 MariaDB입니다.
MySQL을 기반으로 만들어졌기 때문에 쿼리를 비롯한 전반적인 사용법은 MYSQL과 유사하니 사용방법에 대해서는 크게 걱정하지 않아도 됩니다.
비슷한 사용법 외에도 MariaDB는 MySQL 대비 다음의 장점이 있습니다.
-동일하드웨어 사양으로 MySQL 보다 향상된 성능
-좀 더 활성화된 커뮤니티
-다양한 기능
-다양한 스토리지 엔진
구글 검색으로 "MySQL에서 MariaDB로 마이그레이션 해야할 10가지 이유"로 검색해보면 좀 더 다양한 이유를 확인할 수 있습니다.
MySQL을 써왔다면 이번 기회에 MariaDB를 선택해서 진행해보길 추천합니다. 자 그럼 MariaDB를 선택하여 다음으로 이동합니다.
[그림 7.2 DBMS 선택, 표준생성, MariaDB, MariaDB 10.2.21, 프리티어]
 상세설정에서는 다음 그림과 같은 설정을 합니다. 스토리지 유형 범용(SSD), 할당된 스토리지 20,
 DM 인스턴스 클래스 : db.t2.micro - 1 vCPU, 1 GiB RAM / 할당된 스토리지: 20
화면을 아래로 내리면 DB 인스턴스와 마스터 사용자 정보를 등록할 수 있습니다.
[그림 7-5 상세설정2, DB인스턴스 식별자 : freelec-springboot2-webservice,
자격증명설정 마스터 사용자 이름 : DB인스턴스의 마스터사용자에 로그인 ID를 입력하십시오. jojoldu,
마스터암호 :
암호확인 ]
본인만의 DB인스턴스 이름과 사용자 정보를 등록합니다. 여기서 사용된 사용자 정보로 실제 데이터베이스 접근하게 되니 어딘가 메모해놓아도
좋습니다. 네트워크에선 퍼블릭 액세스를 [예]로 변경합니다. 이후 보안 그룹에서 지정된 IP만 접근하도록 막을 예정입니다.
VPC : Default VPC(vpc-c61de2ad)
서브넷 그룹 : default, 퍼블릭액세스 가능 : 예
데이터베이스 옵션에서는 이름을 제외한 나머지를 그림과 동일하게 하면 됩니다.
파라미터 그룹의 변경을 이후에 진행할 예정이니 일단은 기본값으로 둡니다.
데이터베이스 옵션
데이터베이스 이름 : freelec_springboot2_webservice
포트 : 3306
DB 파라미터 그룹 : default_mariadb 10.2
옵션 그룹 : default:mariadb-10-2
모든 설정이 끝나서 [완료] 버튼을 클릭하면 다음과 같이 생성 과정이 진행됩니다.
[DB 인스턴스 세부정보보기]를 클릭하면 생성중인 데이터베이스의 상세 페이지로 이동합니다.
데이터베이스 생성과 상세정보확인. 데이터베이스가 다 생성되었다면 이제 본격적으로 설정을 해보겠습니다.

7.2 RDS 운영환경에 맞는 파라미터 설정하기
RDS를 처음 생성하면 몇가지 설정을 필수로 해야합니다. 우선 다음 3개의 설정을 차례로 진행해보겠습니다.
-타임존
-Character Set
-Max Connection
왼쪽 카테고리에서 [파라미터 그룹] 탭을 클릭해서 이동합니다.
화면 오른쪽 위의 [파라미터 그룹 생성] 버튼을 클릭합니다.
파리미터 그룹 세부정보 위쪽에 DB엔진을 선택하는 항목이 있습니다. 여기서 방금 생성한 MariaDB와 같은 버전을 맞춰야합니다.
앞에서 10.2.21 버전으로 생성했기 때문에 같은 버전대인 10.2 를 선택해야합니다. 만약 10.3.xx버전으로 생성하였다면 10.3을 선택하면 됩니다.
파라미터 그룹 세부정보
파라미터 그룹 패밀리 : mariadb 10.2
그룹이름 : freelec-springboot2-webservice
설명 : freelec-springboot2-webservice
생성이 완료되면 파라미터 그룹 목록창에 새로 생성된 그룹을 볼 수 있습니다. 해당 파라미터 그룹을 클릭합니다.
클릭해서 이동한 상세 페이지의 오른쪽 위를 보면 [파라미터 편집] 버튼이 있습니다. 해당 버튼을 클릭해 편집모드로 전환합니다.
편집모드로 되었다면 이제 하나씩 설정값들을 변경해보겠습니다. 먼저 time_zone을 검색하여 다음과 같이 [Asia/Seoul]을 선택합니다.
다음으로 Character Set을 변경합니다. Character Set은 항목이 많습니다.
아래 8개 항목 중
character 항목들은 모두 utf8mb4로, collation 항목들은 utf8mb4_general_ci 로 변경합니다.
utf8과 utf8mb4의 차이는 이모지 저장가능여부입니다.
-character_set_client
-character_set_connection
-character_set_database
-character_set_filesystem
-character_set_results
-character_set_server
-collation_connection
-collation_server

utf8은 이모지를 저장할 수 없지만, utf8mb4는 이모지를 저장할 수 있으므로 보편적으로 utf8mb4를 많이 사용합니다.
마지막으로 Max Connection을 수정합니다. RDS의 Max Connection은 인스턴스 사양에 따라 자동으로 정해집니다.
현재 프리티어 사양으로는 약 60개의 커넥션만 가능해서 좀 더 넉넉한 값으로 지정합니다.
[그림 7-17 Max Connection 수정 150인데 그냥 기본값으로 사용하자]
이후에 RDS 사양을 높이게 된다면 기본값으로 다시 돌려놓으면 됩니다. 설정이 다 되었다면 오른쪽 위의 [변경사항 저장]버튼을 클릭해 최종저장합니다.
이렇게 생성된 파라미터 그룹을 데이터베이스에 연결하겠습니다.[데이터베이스-DB식별자에 있는 DB중 선택-수정]
옵션 항목에서 DB파라미터 그룹은 default로 되어있습니다. DB 파라미터 그룹을 방금 생성한 신규 파라미터 그룹으로 변경합니다.
DB파라미터 그룹을 연결합니다. (freelec-springboot2-webservice)
저장을 누르면 다음과 같이 수정사항이 요약된 것을 볼 수 있습니다.
여기서 반영 시점을 [즉시 적용] 으로 합니다.
[그림 7-20] 수정사항 요약, 즉시적용
예약된 다음 유지시간으로 하면 지금하지 않고, 새벽 시간대에 진행하게 됩니다. 이 수정사항이 반영되는 동안 데이터베이스가 작동하지 않을 수 있으므로
예약 시간을 걸어두라는 의미지만, 지금은 서비스가 오픈되지 않았기 때문에 즉시 적용합니다. 그럼 다음과 같이 '변경 중'상태가 나옵니다.
간혹 파라미터 그룹이 제대로 반영되지 않을때가 있습니다. 정상적용을 위해
한번 더 재부팅을 진행합니다. 재부팅까지 성공했다면 이제 로컬 PC에서 RDS에 한번 접속해보겠습니다.

7.3 내 PC에서 RDS에 접속해보기
로컬 PC에서 RDS로 접근하기 위해서 RDS의 보안그룹에 본인 PC의 IP를 추가하겠습니다.
RDS의 세부정보 페이지에서 [보안그룹] 항목을 클릭합니다.
RDS의 보안그룹정보를 그대로 두고, 브라우저를 새로 열어봅니다. 그래서 브라우저 다른 창에서는 보안그룹목록 중 EC2에 사용된 보안그룹의 그룹 ID를 복사합니다.
복사된 보안그룹 ID와 본인의 IP를 RDS 보아나 그룹의 인바운드로 추가합니다.
인바운드 규칙 유형에서는 MYSQL/Aurora 를 선택하시면 자동으로 3306 포트가 선택됩니다.
-보안그룹 첫번째 줄 : 현재 내 PC의 IP를 등록합니다.
-보안그룹 두번째 줄 : EC2의 보안그룹을 추가합니다.
    -이렇게 하면 EC2와 RDS 간에 접근이 가능합니다.
    -EC2의 경우 이후에 2대 3대가 될 수 도 있는데 매번 IP를 등록할 수는 없으니 보편적으로 이렇게 보안 그룹 간에 연동을 진행합니다.
RDS와 개인 PC, EC2 간의 연동설정은 모두 되었습니다. 로컬에서 한번 테스트해보겠습니다.

DataBase 플러그인 설치
로컬에서 원격 데이터베이스로 붙을때 GUI 클라이언트를 많이 사용합니다.
MySQL의 대표적인 클라이언트로 Workbench, SQLyog(유료), Sequel Pro(맥 전용), DataGrip(유료) 등이 있습니다.
각각의 도구마다 큰 차이가 없으니 본인이 가장 좋아하는 틀을 사용하면 됩니다. 이책에서는 인텔리제이에 DataBase플러그인을 설치해서 진행하겠습니다.
이 플러그인은 인텔리제이의 공식 플러그인은 아닙니다. 인텔리제이 유료버전을 사용하면 공식적으로 강력한 기능의 데이터베이스 기능을 사용할 수 있습니다.
RDS 정보페이지에서 엔드포인트를 확인합니다. 이 엔드포인트가 접근 가능한 URL이므로 메모장 같은곳에 복사해둡니다.
다시 인텔리제이로 이동해서 다음과 같이 database 플러그인을 검색합니다. 검색결과 중 DataBase Navigator에서 [install]을 클릭합니다.
설치가 다 되었다면 인텔리제이 재시작을 한뒤 Action 검색으로 Data Browser를 실행합니다.
Action 검색
    -맥 OS : [Command + shift + a]
    -윈도우/리눅스 : [Ctrl + Shift + a]
그럼 프로젝트 왼쪽 사이드바에 DB Browser가 노출됩니다. DB Broswer 탭 바로 하단에는 기존에 노출되던 프로젝트 항목들입니다.
다시 자바 코드를 볼때는 해당 탭을 클릭하면 됩니다.
다음 그림과 같이 차례로 버튼을 클릭해서 MySQL 접속 정보를 열어봅니다. Maria DB는 MySQL 기반이므로 MySQL을 사용하면됩니다.
본인이 생성한 RDS의 정보를 차례로 등록합니다.
Name : freelec
Description : freelec
Host : 나의 rds서버 호스트   Port : 3306
Database : mysql
Authentication User/password
User : jojoldu
Password : **********
(Host는 방금 전 복사한 RDS의 엔드포인트를 등록합니다.)
마스터 계정명과 비밀번호를 등록한뒤, 화면 아래의 [Test Connection]을 클릭해 연결테스트를 해봅니다.
Connection Successful 메세지를 보았다면 [Apply -> Ok] 버튼을 차례로 눌러 최종저장을 합니다.
그럼 다음과 같이 인텔리제이에 RDS의 스키마가 노출됩니다. 위쪽에 있는 [Open SQL Console] 버튼을 클릭하고 [New Sql Console...] 항목을
선택해서 SQL을 실행할 콘솔창을 열어보겠습니다.
[그림 7-32 RDS 스키마 노출 후 콘솔창 생성]
새로 생성될 콘솔창의 이름을 정합니다.
[그림 7-33 신규 콘솔창 이름 등록] Console name : freelec2
생성된 콘솔창에서 SQL을 실행해보겠습니다. 쿼리가 수행될 database를 선택하는 쿼리입니다.

use AWS RDS 웹 콘솔에서 지정한 데이터베이스명;

만약 본인이 RDS 생성시 지정한 database 명을 잊었다면 인텔리제이 왼쪽의 Schema 항목을 보면 MySQL에서 기본으로 생성하는 스키마 외에 다른 스키마가 1개
추가되어 있으니 이를 확인하면 됩니다.
쿼리는 다음과 같이 실행합니다. 쿼리문을 드래그로 선택한뒤 화면 위쪽에 화살표로 된 [Execute Statement] 버튼을 클릭하면 됩니다.
다음 그림과 같이 화면 아래의 Execute Console에서 SQL Statement executed successfuly 메세지가 떳다면 쿼리가 정상적으로 수행된 것입니다.
데이터베이스가 선택된 상태에서 현재의 Character_set, collation 설정을 확인합니다.
show variables like 'c%';
쿼리 결과를 보면 다른 필드들은 모두 utfmb4가 잘 적용되었는데 character_set_databse, collation_connection 2가지 항목이 latin1로 되어있습니다.
(기본 Character가 latin1입니다.)
이 2개의 항목이 MariaDB에서만 RDS 파라미터 그룹으로는 변경이 안됩니다. 그래서 직접 변경하겠습니다. 다음 쿼리를 실행합니다.

ALTER DATABASE 데이터베이스명
CHARACTER SET = 'utf8mb4'
COLLATE = 'utf8mb4_general_ci';

쿼리를 수행하였다면 다시 한번 character set을 확인해봅니다.
show variables like 'c%';
[그림 7-37 character set 변경 성공]
성공적으로 모든 항목이 utf8mb4로 변경된 것을 확인하였습니다.
빠르게 타임존까지 아래 쿼리로 확인해봅니다.
select @@time_zone, now();
[그림 7-38 타임존확인 @@time_zone Asia/Seoul 이어야합니다.]
RDS 파라미터 그룹이 잘 적용되어 한국 시간으로 된것을 확인하였습니다.
마지막으로 한글명이 잘들어가는지 간단한 테이블 생성과 insert 쿼리를 실행해봅니다.
테이블 생성은 인코딩 설정 변경 전에 생성되면 안됩니다. 만들어질 당시의 설정값을 그대로 유지하고있어, 자동변경이 되지않고 강제로 변경해야만 합니다.
웬만하면 테이블은 모든 설정이 끝난 후 생성하시는 것이 좋습니다.

다음 쿼리를 차례로 실행해봅니다.
CREATE TABLE room (
    id bigint(20) NOT NULL AUTO_INCREMENT,
    content varchar(255) DEFAULT NULL,
    PRIMARY KEY (id)
) ENGINE=INNODB;

insert into room(content) values ('테스트');

select * from room;

다음과 같이 한글 데이터도 잘 등록되는 것이 확인됩니다.

[그림 7-39 한글 데이터 등록 확인]
select * from room;

RDS에 대한 모든 설정이 끝났습니다!
이제 이렇게 설정된 RDS가 EC2와 잘 연동되는지 확인해보겠습니다.

7-4 EC2에서 RDS에서 접근 확인
6장에서 진행한대로 EC2에 ssh 접속을 진행합니다.
-맥에선 ssh 서비스명
-윈도우에선 putty
접속되었따면 MySQL 접근 테스트를 위해 MYSQL CLI 를 설치하겠습니다.
sudo yum install mysql
(실제 EC2의 MySQL을 설치해서 쓰는게 아닌, 명령어 라인만 쓰기 위한 설치입니다.)
[그림 7-40 EC2에 MYSQL CLI 설치]
sudo yum install mysql

설치가 다 되었다면 로컬에서 접근하듯이 계정, 비밀번호, 호스트 주소를 사용해 RDS에 접속합니다.
mysql -u 계정 -p -h Host주소
필자의 경우 다음 명령어로 진행합니다.
mysql -u jojoldu -p -h freelec-springboot2-webservice.crbgmui~~~~~.amazonaws.com
패스워드를 입력하라는 메세지가 나오면 패스워드까지 입력합니다. 다음과 같이 EC2에서 RDS로 접속되는 것을 확인할 수 있습니다.
RDS에 접속되었으면 실제로 생성한 RDS가 맞는지 간단한 쿼리를 한번 실행해보겠습니다.
show databases;
우리가 생성했던 freelec-springboot2-_webservice라는 데이터베이스가 있음을 확인했습니다.
아무래도 직접 코드를 치는것이 아니라서 지루하게 느껴졌을텐데 끝까지 진행했다면 감사합니다. 다음장부터는 여태껏 작업했던 내용을 토대로
실제로 스프링 부트 프로젝트를 EC2에 배포하고 RDS에 접근하는 방법을 진행하고 개선해보겠습니다.






[ADD] AWS 관리형 데이터베이스 서비스 RDS 설명, RDS 서비스시 필요한 여러 파라미터 설정들, 인텔리제이 커뮤니티 버전으로 데이터베이스 다루기, EC2와 RDS 간 연동방법







