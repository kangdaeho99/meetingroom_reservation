[Spring Boot 의 ApplicationRunner, Spring 애플리케이션 시작 시 실행되는 로직 작성하기]
https://sgc109.github.io/2020/07/09/spring-running-startup-logic/

[만약 h2-database에서 data.sql 을 안쓰고 Applicationm Runner를 사용한다면??]
https://stackoverflow.com/questions/38040572/spring-boot-loading-initial-data

[h2-database에서 import.sql말고 data.sql을 사용하니 작동되었다.]
INSERT INTO ROOM (GNO, MODDATE, REGDATE, CONTENT, TITLE, WRITER) VALUES (DEFAULT, NOW(), NOW(), 'content_value', 'title_value', 'writer_value');
INSERT INTO ROOM (GNO, MODDATE, REGDATE, CONTENT, TITLE, WRITER)
VALUES (DEFAULT, '2022-03-30 10:30:00', '2022-03-30 10:30:00', '내용', '제목', '작성자');


이건 application.properties에 넣엇는데 아래처럼 주석처리햇다.
이유는 schema.sql은 테이블생성인데 그걸해주고싶진않음.,
spring.jpa.defer-datasource-initialization=true
#spring.sql.init.data-locations=classpath:/data.sql;   //데이터 관련
#spring.sql.init.schema-locations=classpath:schema.sql; // 테이블 생성 관련

나는 ApplicationRunner를 활용하여 save를 하는방식에 대해 알아볼려고한다.

public class ApplicationStartUpRunner implements ApplicationRunner { 를 활용하여 진행


@Component
@DependsOn("RoomRepository")
public class ApplicationStartUpRunner implements ApplicationRunner {

    @Autowired
    private RoomRepository roomRepository;

    @Override
    public void run(ApplicationArguments args) throws Exception {
        IntStream.rangeClosed(1, 24).forEach(i ->{
            Room room = Room.builder()
                    .title("Title...."+i)
                    .content("Content...."+i)
                    .writer("user..."+i)
                    .build();
            roomRepository.save(room);
        });

    }
}


해당 코드로 진행했는데 ApplicationRunner가 RoomRepository Bean이 생성되지 않았는데 실행되어 오류발생.
chatgpt에게 물어봐서 @DependsOn("RoomRepository") 을 통해 RoomRepository라는 bean이 생성된 이후에 작업하도록 의존성을 설정해주었다.
---------->>>>>>>>>>>>>>> 이거 작동안됨 이렇게 할시 그냥 프로젝트 끝나는 에러있음.
[[스프링] Context의 등록되는 빈의 순서를 정하자 - @DependsOn] 이렇게 할려면 component에 이름을 지어주어야합니다.
https://heavenly-appear.tistory.com/265


좋은 방안이 있다. RoomService는 애초에 RoomRepository의 빈이 다 생성되고 작동하니 사용하기에 안전하다.
그러므로 Service를 사용해서 바꿉니다.

@Component
public class ApplicationStartUpRunner implements ApplicationRunner {


    @Autowired
    private RoomService roomService;

    @Override
    public void run(ApplicationArguments args) throws Exception {

        roomService.initRoomDataBase();

    }
}

--
ApplicationStartUpRunner에서 사용하는 RoomRepository를 Bean으로 등록하는 것이 도움이 될 수 있습니다.

예를 들어, RoomRepository 클래스에 @Component 어노테이션을 추가하고,
ApplicationStartUpRunner 클래스에서는 RoomRepository 대신에 RoomService 클래스를 주입 받도록 변경합니다.
그리고 RoomService 클래스에서는 RoomRepository를 주입 받아서 사용하도록 구현합니다.
이렇게 하면 RoomRepository가 RoomService보다 먼저 Bean으로 등록되기 때문에 오류가 발생하지 않게 됩니다.
--